{"version":3,"file":"EnhancedPlanningPage-a9deebe8.js","sources":["../../../node_modules/lucide-react/dist/esm/icons/arrow-down-circle.js","../../../node_modules/lucide-react/dist/esm/icons/backpack.js","../../../node_modules/lucide-react/dist/esm/icons/cpu.js","../../../node_modules/lucide-react/dist/esm/icons/flag.js","../../../src/components/tasks/QuickTaskInput.tsx","../../../src/components/planning/TaskPlanningBoard.tsx","../../../src/components/planning/BackwardPlanner.tsx","../../../src/components/planning/project-breakdown/SimplifiedProjectBreakdown.tsx","../../../src/components/planning/project-breakdown/ProjectBreakdown.tsx","../../../src/pages/EnhancedPlanningPage.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.344.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst ArrowDownCircle = createLucideIcon(\"ArrowDownCircle\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"path\", { d: \"M12 8v8\", key: \"napkw2\" }],\n  [\"path\", { d: \"m8 12 4 4 4-4\", key: \"k98ssh\" }]\n]);\n\nexport { ArrowDownCircle as default };\n//# sourceMappingURL=arrow-down-circle.js.map\n","/**\n * @license lucide-react v0.344.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Backpack = createLucideIcon(\"Backpack\", [\n  [\n    \"path\",\n    { d: \"M4 10a4 4 0 0 1 4-4h8a4 4 0 0 1 4 4v10a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2Z\", key: \"wvr1b5\" }\n  ],\n  [\"path\", { d: \"M9 6V4a2 2 0 0 1 2-2h2a2 2 0 0 1 2 2v2\", key: \"donm21\" }],\n  [\"path\", { d: \"M8 21v-5a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v5\", key: \"xk3gvk\" }],\n  [\"path\", { d: \"M8 10h8\", key: \"c7uz4u\" }],\n  [\"path\", { d: \"M8 18h8\", key: \"1no2b1\" }]\n]);\n\nexport { Backpack as default };\n//# sourceMappingURL=backpack.js.map\n","/**\n * @license lucide-react v0.344.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Cpu = createLucideIcon(\"Cpu\", [\n  [\"rect\", { x: \"4\", y: \"4\", width: \"16\", height: \"16\", rx: \"2\", key: \"1vbyd7\" }],\n  [\"rect\", { x: \"9\", y: \"9\", width: \"6\", height: \"6\", key: \"o3kz5p\" }],\n  [\"path\", { d: \"M15 2v2\", key: \"13l42r\" }],\n  [\"path\", { d: \"M15 20v2\", key: \"15mkzm\" }],\n  [\"path\", { d: \"M2 15h2\", key: \"1gxd5l\" }],\n  [\"path\", { d: \"M2 9h2\", key: \"1bbxkp\" }],\n  [\"path\", { d: \"M20 15h2\", key: \"19e6y8\" }],\n  [\"path\", { d: \"M20 9h2\", key: \"19tzq7\" }],\n  [\"path\", { d: \"M9 2v2\", key: \"165o2o\" }],\n  [\"path\", { d: \"M9 20v2\", key: \"i2bqo8\" }]\n]);\n\nexport { Cpu as default };\n//# sourceMappingURL=cpu.js.map\n","/**\n * @license lucide-react v0.344.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Flag = createLucideIcon(\"Flag\", [\n  [\"path\", { d: \"M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z\", key: \"i9b6wo\" }],\n  [\"line\", { x1: \"4\", x2: \"4\", y1: \"22\", y2: \"15\", key: \"1cm3nv\" }]\n]);\n\nexport { Flag as default };\n//# sourceMappingURL=flag.js.map\n","import React, { useState, useRef, useEffect } from 'react';\nimport { Task } from '../../types';\nimport { useAppContext } from '../../context/AppContextSupabase';\nimport { Plus, Circle, Calendar, Folder, Tag, Flame, Star, Brain, Battery } from 'lucide-react';\nimport { getTodayString, getTomorrowString, formatDateString, extractDateFromText } from '../../utils/dateUtils';\n\ninterface QuickTaskInputProps {\n  onTaskAdded?: () => void;\n  defaultProjectId?: string | null;\n  defaultDueDate?: string | null;\n}\n\nconst QuickTaskInput: React.FC<QuickTaskInputProps> = ({\n  onTaskAdded,\n  defaultProjectId = null,\n  defaultDueDate = null,\n}) => {\n  const { addTask, projects, categories } = useAppContext();\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [dueDate, setDueDate] = useState<string | null>(defaultDueDate);\n  const [projectId, setProjectId] = useState<string | null>(defaultProjectId);\n  const [categoryIds, setCategoryIds] = useState<string[]>([]);\n  const [priority, setPriority] = useState<'low' | 'medium' | 'high'>('medium');\n  const [urgency, setUrgency] = useState<'today' | 'week' | 'month' | 'someday'>('week');\n  const [emotionalWeight, setEmotionalWeight] = useState<'easy' | 'neutral' | 'stressful' | 'dreading'>('neutral');\n  const [energyRequired, setEnergyRequired] = useState<'low' | 'medium' | 'high'>('medium');\n  const [showCategoryPicker, setShowCategoryPicker] = useState(false);\n  const [showProjectPicker, setShowProjectPicker] = useState(false);\n  \n  const inputRef = useRef<HTMLInputElement>(null);\n  \n  useEffect(() => {\n    if (isExpanded && inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, [isExpanded]);\n  \n  const handleSubmit = (e?: React.FormEvent) => {\n    if (e) {\n      e.preventDefault();\n    }\n    \n    // Check if the title is empty after trimming\n    if (!title.trim()) return;\n    \n    // Create the task with the trimmed title for storage\n    const newTask: Partial<Task> = {\n      title: title.trim(), // Make sure to trim when saving\n      dueDate,\n      projectId,\n      categoryIds,\n      priority,\n      urgency,\n      emotionalWeight,\n      energyRequired,\n      completed: false,\n      archived: false,\n    };\n    \n    addTask(newTask);\n    \n    // Reset form\n    setTitle('');\n    if (!defaultDueDate) setDueDate(null);\n    if (!defaultProjectId) setProjectId(null);\n    setCategoryIds([]);\n    setPriority('medium');\n    setUrgency('week');\n    setEmotionalWeight('neutral');\n    setEnergyRequired('medium');\n    \n    if (onTaskAdded) {\n      onTaskAdded();\n    }\n    \n    // Keep focus on input\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  };\n  \n  const toggleCategory = (categoryId: string) => {\n    setCategoryIds(prev => {\n      if (prev.includes(categoryId)) {\n        return prev.filter(id => id !== categoryId);\n      } else {\n        return [...prev, categoryId];\n      }\n    });\n  };\n  \n  // Process title for smart parsing\n  const processTitle = (input: string) => {\n    let processedText = input;\n    \n    // First extract natural language dates\n    const { cleanedText, date } = extractDateFromText(processedText);\n    if (date) {\n      setDueDate(formatDateString(date));\n      processedText = cleanedText;\n    }\n    \n    // Check for priority markers like \"!high\", \"!medium\", \"!low\"\n    if (processedText.includes('!high')) {\n      setPriority('high');\n      processedText = processedText.replace('!high', '');\n    } else if (processedText.includes('!medium')) {\n      setPriority('medium');\n      processedText = processedText.replace('!medium', '');\n    } else if (processedText.includes('!low')) {\n      setPriority('low');\n      processedText = processedText.replace('!low', '');\n    }\n    \n    // Check for project tags like \"#project-name\"\n    const projectMatch = processedText.match(/#([a-zA-Z0-9-_]+)/);\n    if (projectMatch && projectMatch[1]) {\n      const projectName = projectMatch[1].toLowerCase();\n      const matchedProject = projects.find(p => \n        p.name.toLowerCase().replace(/\\s+/g, '-') === projectName\n      );\n      \n      if (matchedProject) {\n        setProjectId(matchedProject.id);\n        processedText = processedText.replace(/#([a-zA-Z0-9-_]+)/, '');\n      }\n    }\n    \n    // Check for category tags like \"@category-name\"\n    const categoryMatches = processedText.match(/@([a-zA-Z0-9-_]+)/g);\n    if (categoryMatches) {\n      const newCategoryIds: string[] = [];\n      \n      categoryMatches.forEach(match => {\n        const categoryName = match.substring(1).toLowerCase();\n        const matchedCategory = categories.find(c => \n          c.name.toLowerCase().replace(/\\s+/g, '-') === categoryName\n        );\n        \n        if (matchedCategory) {\n          newCategoryIds.push(matchedCategory.id);\n          processedText = processedText.replace(match, '');\n        }\n      });\n      \n      if (newCategoryIds.length > 0) {\n        setCategoryIds(newCategoryIds);\n      }\n    }\n    \n    // Clean up any double spaces and set the final title\n    processedText = processedText.replace(/\\s+/g, ' ').trim();\n    setTitle(processedText);\n  };\n  \n  const getPriorityColor = () => {\n    switch (priority) {\n      case 'high':\n        return 'text-red-500';\n      case 'medium':\n        return 'text-orange-500';\n      case 'low':\n        return 'text-green-500';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  const getUrgencyColor = () => {\n    switch (urgency) {\n      case 'today':\n        return 'text-red-600 bg-red-50 px-2 py-1 rounded-full';\n      case 'week':\n        return 'text-orange-600 bg-orange-50 px-2 py-1 rounded-full';\n      case 'month':\n        return 'text-yellow-600 bg-yellow-50 px-2 py-1 rounded-full';\n      case 'someday':\n        return 'text-blue-600 bg-blue-50 px-2 py-1 rounded-full';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  const getEnergyColor = () => {\n    switch (energyRequired) {\n      case 'low':\n        return 'text-green-600 bg-green-50 px-2 py-1 rounded-full';\n      case 'medium':\n        return 'text-green-600 bg-green-50 px-2 py-1 rounded-full';\n      case 'high':\n        return 'text-green-600 bg-green-50 px-2 py-1 rounded-full';\n      default:\n        return 'text-gray-400';\n    }\n  };\n\n  const getEmotionalColor = () => {\n    switch (emotionalWeight) {\n      case 'easy':\n        return 'text-green-600 bg-green-50 px-2 py-1 rounded-full';\n      case 'neutral':\n        return 'text-yellow-600 bg-yellow-50 px-2 py-1 rounded-full';\n      case 'stressful':\n        return 'text-orange-600 bg-orange-50 px-2 py-1 rounded-full';\n      case 'dreading':\n        return 'text-red-600 bg-red-50 px-2 py-1 rounded-full';\n      default:\n        return 'text-gray-400';\n    }\n  };\n  \n  return (\n    <div className={`bg-white rounded-lg shadow p-3 transition-all ${isExpanded ? 'border-indigo-500 border' : ''}`}>\n      <form onSubmit={handleSubmit}>\n        <div className=\"flex items-center\">\n          <button \n            type=\"button\"\n            className=\"mr-3 flex-shrink-0 focus:outline-none text-gray-400 hover:text-indigo-500\"\n            onClick={() => setIsExpanded(!isExpanded)}\n          >\n            <Plus size={24} />\n          </button>\n          \n          <input\n            ref={inputRef}\n            type=\"text\"\n            placeholder={isExpanded ? \"What do you need to do? (Try !today, #project, @category)\" : \"Quick add task...\"}\n            className=\"flex-grow text-gray-900 placeholder-gray-500 border-0 focus:ring-0 p-0 text-base\"\n            value={title}\n            onChange={(e) => processTitle(e.target.value)}\n            onClick={() => setIsExpanded(true)}\n          />\n          \n          {title && (\n            <button\n              type=\"submit\"\n              className=\"ml-2 p-2 rounded-full bg-indigo-50 text-indigo-600 hover:bg-indigo-100\"\n            >\n              <Plus size={18} />\n            </button>\n          )}\n        </div>\n        \n        {isExpanded && (\n          <div className=\"mt-3 pt-3 border-t border-gray-100\">\n            <div className=\"flex flex-wrap items-center gap-3\">\n              <button\n                type=\"button\"\n                className={`flex items-center text-sm ${dueDate ? 'text-indigo-600 bg-indigo-50 px-2 py-1 rounded-full' : 'text-gray-500'}`}\n                onClick={() => {\n                  setDueDate(dueDate ? null : getTodayString());\n                }}\n              >\n                <Calendar size={16} className=\"mr-1\" />\n                {dueDate ? formatDate(dueDate) : 'Due date'}\n              </button>\n              \n              <button\n                type=\"button\"\n                className={`flex items-center text-sm ${getPriorityColor()}`}\n                onClick={() => {\n                  if (priority === 'medium') setPriority('high');\n                  else if (priority === 'high') setPriority('low');\n                  else setPriority('medium');\n                }}\n              >\n                <Circle size={16} className=\"mr-1\" />\n                {priority === 'medium' ? 'Medium' : priority === 'high' ? 'High' : 'Low'} priority\n              </button>\n              \n              <div className=\"relative\">\n                <button\n                  type=\"button\"\n                  className={`flex items-center text-sm ${projectId ? 'text-indigo-600 bg-indigo-50 px-2 py-1 rounded-full' : 'text-gray-500'}`}\n                  onClick={() => {\n                    setShowProjectPicker(!showProjectPicker);\n                    setShowCategoryPicker(false);\n                  }}\n                >\n                  <Folder size={16} className=\"mr-1\" />\n                  {projectId ? projects.find(p => p.id === projectId)?.name || 'Project' : 'Project'}\n                </button>\n                \n                {showProjectPicker && (\n                  <div className=\"absolute left-0 top-8 z-10 bg-white rounded-md shadow-lg p-2 w-48 max-h-48 overflow-y-auto\">\n                    {projects.map(project => (\n                      <div\n                        key={project.id}\n                        className={`flex items-center p-2 cursor-pointer hover:bg-gray-100 rounded ${projectId === project.id ? 'bg-indigo-50' : ''}`}\n                        onClick={() => {\n                          setProjectId(projectId === project.id ? null : project.id);\n                          setShowProjectPicker(false);\n                        }}\n                      >\n                        <div \n                          className=\"w-3 h-3 rounded-full mr-2\" \n                          style={{ backgroundColor: project.color }}\n                        ></div>\n                        <span className=\"text-sm\">{project.name}</span>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"relative\">\n                <button\n                  type=\"button\"\n                  className={`flex items-center text-sm ${categoryIds.length > 0 ? 'text-indigo-600 bg-indigo-50 px-2 py-1 rounded-full' : 'text-gray-500'}`}\n                  onClick={() => {\n                    setShowCategoryPicker(!showCategoryPicker);\n                    setShowProjectPicker(false);\n                  }}\n                >\n                  <Tag size={16} className=\"mr-1\" />\n                  {categoryIds.length > 0 ? `${categoryIds.length} ${categoryIds.length === 1 ? 'category' : 'categories'}` : 'Categories'}\n                </button>\n                \n                {showCategoryPicker && (\n                  <div className=\"absolute left-0 top-8 z-10 bg-white rounded-md shadow-lg p-2 w-48 max-h-48 overflow-y-auto\">\n                    {categories.map(category => (\n                      <div\n                        key={category.id}\n                        className={`flex items-center p-2 cursor-pointer hover:bg-gray-100 rounded ${categoryIds.includes(category.id) ? 'bg-indigo-50' : ''}`}\n                        onClick={() => toggleCategory(category.id)}\n                      >\n                        <div \n                          className=\"w-3 h-3 rounded-full mr-2\" \n                          style={{ backgroundColor: category.color }}\n                        ></div>\n                        <span className=\"text-sm\">{category.name}</span>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n              \n              {/* Enhanced ADHD-friendly fields */}\n              <button\n                type=\"button\"\n                className={`flex items-center font-medium transition-all hover:scale-105 ${getUrgencyColor()}`}\n                onClick={() => {\n                  if (urgency === 'week') setUrgency('today');\n                  else if (urgency === 'today') setUrgency('month');\n                  else if (urgency === 'month') setUrgency('someday');\n                  else setUrgency('week');\n                }}\n              >\n                <Flame size={18} className=\"mr-2\" />\n                <span className=\"text-base\">\n                  {urgency === 'today' ? '🔥 Today' : urgency === 'week' ? '📅 Week' : urgency === 'month' ? '📌 Month' : '🌊 Someday'}\n                </span>\n              </button>\n              \n              <button\n                type=\"button\"\n                className={`flex items-center font-medium transition-all hover:scale-105 ${getEnergyColor()}`}\n                onClick={() => {\n                  if (energyRequired === 'medium') setEnergyRequired('low');\n                  else if (energyRequired === 'low') setEnergyRequired('high');\n                  else setEnergyRequired('medium');\n                }}\n              >\n                <Battery size={18} className=\"mr-2\" />\n                <span className=\"text-base\">\n                  {energyRequired === 'low' ? '🔋 Low' : energyRequired === 'medium' ? '⚡ Med' : '🚀 High'}\n                </span>\n              </button>\n              \n              <button\n                type=\"button\"\n                className={`flex items-center font-medium transition-all hover:scale-105 ${getEmotionalColor()}`}\n                onClick={() => {\n                  if (emotionalWeight === 'neutral') setEmotionalWeight('easy');\n                  else if (emotionalWeight === 'easy') setEmotionalWeight('stressful');\n                  else if (emotionalWeight === 'stressful') setEmotionalWeight('dreading');\n                  else setEmotionalWeight('neutral');\n                }}\n              >\n                <Brain size={18} className=\"mr-2\" />\n                <span className=\"text-base\">\n                  {emotionalWeight === 'easy' ? '😊 Love it' : emotionalWeight === 'neutral' ? '😐 Neutral' : emotionalWeight === 'stressful' ? '😩 Ugh' : '😰 Dread'}\n                </span>\n              </button>\n            </div>\n          </div>\n        )}\n      </form>\n    </div>\n  );\n};\n\n// Helper to format date for display\nconst formatDate = (dateString: string): string => {\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  \n  const tomorrow = new Date(today);\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  \n  const date = new Date(dateString);\n  date.setHours(0, 0, 0, 0);\n  \n  if (date.getTime() === today.getTime()) {\n    return 'Today';\n  } else if (date.getTime() === tomorrow.getTime()) {\n    return 'Tomorrow';\n  } else {\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric',\n    });\n  }\n};\n\nexport default QuickTaskInput;","import React, { useState } from 'react';\nimport { Task, Project, Category } from '../../types';\nimport { ImprovedTaskCard } from '../tasks/ImprovedTaskCard';\nimport { useAppContext } from '../../context/AppContextSupabase';\nimport { Clock, Target, Menu, Download, LayoutGrid, List, ArrowLeft, ArrowRight, Plus } from 'lucide-react';\nimport Button from '../common/Button';\nimport QuickTaskInput from '../tasks/QuickTaskInput';\n\ntype ColumnType = 'backlog' | 'planning' | 'ready' | 'inProgress' | 'done';\n\ninterface TaskPlanningBoardProps {\n  projectId?: string;\n  onEditTask: (task: Task) => void;\n}\n\nconst TaskPlanningBoard: React.FC<TaskPlanningBoardProps> = ({ \n  projectId,\n  onEditTask\n}) => {\n  const { tasks, projects, categories, addTask, updateTask, deleteTask } = useAppContext();\n  const [viewMode, setViewMode] = useState<'board' | 'list'>('board');\n  \n  // Filter tasks by project if projectId is provided\n  const filteredTasks = projectId \n    ? tasks.filter(task => task.projectId === projectId)\n    : tasks;\n  \n  // Filter tasks into columns\n  const backlogTasks = filteredTasks.filter(task => \n    !task.completed && task.size === 'large' && !task.parentTaskId\n  );\n  \n  const planningTasks = filteredTasks.filter(task => \n    !task.completed && task.parentTaskId === null && task.size !== 'large' && \n    // Has subtasks but not all subtasks are ready\n    (task.subtasks?.length > 0 && !task.subtasks.every(subtaskId => {\n      const subtask = tasks.find(t => t.id === subtaskId);\n      return subtask && subtask.size === 'small';\n    }))\n  );\n  \n  const readyTasks = filteredTasks.filter(task => \n    !task.completed && task.parentTaskId === null && task.size === 'small'\n  );\n  \n  const inProgressTasks = filteredTasks.filter(task => \n    !task.completed && task.energyLevel === 'high'\n  );\n  \n  const doneTasks = filteredTasks.filter(task => \n    task.completed && !task.archived\n  );\n\n  const handleMoveTask = (task: Task, targetColumn: ColumnType) => {\n    const updatedTask = { ...task };\n    \n    // Update task based on target column\n    switch (targetColumn) {\n      case 'backlog':\n        updatedTask.size = 'large';\n        break;\n      case 'planning':\n        // If moving from backlog to planning, break down the task\n        if (task.size === 'large') {\n          updatedTask.size = 'medium';\n        }\n        break;\n      case 'ready':\n        updatedTask.size = 'small';\n        break;\n      case 'inProgress':\n        updatedTask.energyLevel = 'high';\n        break;\n      case 'done':\n        updatedTask.completed = true;\n        break;\n    }\n    \n    updateTask(updatedTask);\n  };\n  \n  const handleCreateSubtask = (parentTask: Task) => {\n    const newTask: Partial<Task> = {\n      title: `Subtask of ${parentTask.title}`,\n      description: '',\n      completed: false,\n      archived: false,\n      projectId: parentTask.projectId,\n      categoryIds: [...parentTask.categoryIds],\n      parentTaskId: parentTask.id,\n      size: 'small', // Subtasks are typically small\n      priority: parentTask.priority || 'medium',\n      energyLevel: 'medium',\n    };\n    \n    const createdTask = addTask(newTask);\n    \n    // Update parent task to include new subtask\n    updateTask({\n      ...parentTask,\n      subtasks: [...(parentTask.subtasks || []), createdTask.id]\n    });\n  };\n  \n  const renderTaskColumn = (\n    title: string, \n    icon: React.ReactNode, \n    tasks: Task[], \n    columnType: ColumnType,\n    color: string\n  ) => {\n    return (\n      <div className=\"flex flex-col h-full\">\n        <div className={`flex items-center p-2 ${color} rounded-t-lg`}>\n          <div className=\"flex items-center\">\n            {icon}\n            <h3 className=\"font-bold text-gray-700 dark:text-gray-300 ml-2\">{title}</h3>\n          </div>\n          <div className=\"ml-2 bg-white dark:bg-gray-800 rounded-full px-2 py-0.5 text-xs font-medium text-gray-700 dark:text-gray-300\">\n            {tasks.length}\n          </div>\n        </div>\n        \n        <div className=\"flex-grow bg-gray-50 dark:bg-gray-800 rounded-b-xl p-2 overflow-y-auto space-y-2\" style={{ minHeight: '300px' }}>\n          {tasks.length === 0 ? (\n            <div className=\"h-full flex items-center justify-center text-gray-400 text-sm\">\n              No tasks\n            </div>\n          ) : (\n            tasks.map(task => (\n              <div key={task.id} className=\"relative group\">\n                <ImprovedTaskCard\n                  task={task}\n                  projects={projects}\n                  categories={categories}\n                  onEdit={onEditTask}\n                />\n                \n                <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity flex space-x-1\">\n                  {columnType !== 'backlog' && (\n                    <button \n                      className=\"p-1 bg-gray-100 rounded hover:bg-gray-200\"\n                      onClick={() => handleMoveTask(task, 'backlog')}\n                      title=\"Move to Backlog\"\n                    >\n                      <ArrowLeft size={14} />\n                    </button>\n                  )}\n                  \n                  {columnType === 'backlog' && (\n                    <button \n                      className=\"p-1 bg-blue-100 rounded hover:bg-blue-200\"\n                      onClick={() => handleMoveTask(task, 'planning')}\n                      title=\"Move to Planning\"\n                    >\n                      <ArrowRight size={14} />\n                    </button>\n                  )}\n                  \n                  {columnType === 'planning' && (\n                    <>\n                      <button \n                        className=\"p-1 bg-blue-100 rounded hover:bg-blue-200\"\n                        onClick={() => handleCreateSubtask(task)}\n                        title=\"Break Down\"\n                      >\n                        <Menu size={14} />\n                      </button>\n                      <button \n                        className=\"p-1 bg-green-100 rounded hover:bg-green-200\"\n                        onClick={() => handleMoveTask(task, 'ready')}\n                        title=\"Mark as Ready\"\n                      >\n                        <ArrowRight size={14} />\n                      </button>\n                    </>\n                  )}\n                  \n                  {columnType === 'ready' && (\n                    <button \n                      className=\"p-1 bg-blue-100 dark:bg-blue-900/20 rounded-xl hover:bg-blue-200 dark:hover:bg-blue-900/40 transition-all hover:scale-105\"\n                      onClick={() => handleMoveTask(task, 'inProgress')}\n                      title=\"Start Work\"\n                    >\n                      <ArrowRight size={14} />\n                    </button>\n                  )}\n                  \n                  {columnType === 'inProgress' && (\n                    <button \n                      className=\"p-1 bg-green-100 rounded hover:bg-green-200\"\n                      onClick={() => handleMoveTask(task, 'done')}\n                      title=\"Complete\"\n                    >\n                      <ArrowRight size={14} />\n                    </button>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n          \n          {columnType === 'backlog' && (\n            <div className=\"pt-2\">\n              <QuickTaskInput \n                defaultProjectId={projectId}\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <h2 className=\"text-xl font-bold text-gray-900\">Planning Board</h2>\n        <div className=\"flex space-x-2\">\n          <div className=\"flex bg-gray-100 rounded-md p-1\">\n            <button\n              className={`p-1 ${viewMode === 'board' ? 'bg-white rounded-md shadow-sm' : ''}`}\n              onClick={() => setViewMode('board')}\n              title=\"Board View\"\n            >\n              <LayoutGrid size={18} />\n            </button>\n            <button\n              className={`p-1 ${viewMode === 'list' ? 'bg-white rounded-md shadow-sm' : ''}`}\n              onClick={() => setViewMode('list')}\n              title=\"List View\"\n            >\n              <List size={18} />\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      {viewMode === 'board' ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4\">\n          {renderTaskColumn(\n            'Backlog', \n            <Download size={18} className=\"text-gray-600\" />, \n            backlogTasks, \n            'backlog',\n            'bg-gray-100'\n          )}\n          \n          {renderTaskColumn(\n            'Planning', \n            <Menu size={18} className=\"text-blue-600\" />, \n            planningTasks, \n            'planning',\n            'bg-blue-100'\n          )}\n          \n          {renderTaskColumn(\n            'Ready', \n            <Target size={18} className=\"text-green-600\" />, \n            readyTasks, \n            'ready',\n            'bg-green-100'\n          )}\n          \n          {renderTaskColumn(\n            'In Progress', \n            <Clock size={18} className=\"text-blue-600 dark:text-blue-400\" />, \n            inProgressTasks, \n            'inProgress',\n            'bg-blue-100 dark:bg-blue-900/20'\n          )}\n          \n          {renderTaskColumn(\n            'Done', \n            <Clock size={18} className=\"text-gray-600\" />, \n            doneTasks, \n            'done',\n            'bg-gray-100'\n          )}\n        </div>\n      ) : (\n        <div className=\"space-y-6\">\n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <h3 className=\"text-lg font-bold text-gray-900 mb-4 flex items-center\">\n              <Download size={18} className=\"text-gray-600 mr-2\" />\n              Backlog\n            </h3>\n            <div className=\"space-y-2\">\n              {backlogTasks.length === 0 ? (\n                <div className=\"text-gray-500 italic\">No tasks in backlog</div>\n              ) : (\n                backlogTasks.map(task => (\n                  <ImprovedTaskCard\n                    key={task.id}\n                    task={task}\n                    projects={projects}\n                    categories={categories}\n                    onEdit={onEditTask}\n                    onDelete={deleteTask}\n                  />\n                ))\n              )}\n              <div className=\"pt-2\">\n                <QuickTaskInput \n                  defaultProjectId={projectId}\n                />\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <h3 className=\"text-lg font-bold text-gray-900 mb-4 flex items-center\">\n              <Menu size={18} className=\"text-blue-600 mr-2\" />\n              Planning\n            </h3>\n            <div className=\"space-y-2\">\n              {planningTasks.length === 0 ? (\n                <div className=\"text-gray-500 italic\">No tasks being planned</div>\n              ) : (\n                planningTasks.map(task => (\n                  <div key={task.id} className=\"relative group\">\n                    <ImprovedTaskCard\n                      task={task}\n                      projects={projects}\n                      categories={categories}\n                      onEdit={onEditTask}\n                    />\n                    <div className=\"absolute top-2 right-12 opacity-0 group-hover:opacity-100 transition-opacity\">\n                      <Button\n                        variant=\"secondary\"\n                        size=\"sm\"\n                        icon={<Plus size={14} />}\n                        onClick={() => handleCreateSubtask(task)}\n                      >\n                        Add Subtask\n                      </Button>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <h3 className=\"text-lg font-bold text-gray-900 mb-4 flex items-center\">\n              <Target size={18} className=\"text-green-600 mr-2\" />\n              Ready\n            </h3>\n            <div className=\"space-y-2\">\n              {readyTasks.length === 0 ? (\n                <div className=\"text-gray-500 italic\">No tasks ready to work on</div>\n              ) : (\n                readyTasks.map(task => (\n                  <ImprovedTaskCard\n                    key={task.id}\n                    task={task}\n                    projects={projects}\n                    categories={categories}\n                    onEdit={onEditTask}\n                    onDelete={deleteTask}\n                  />\n                ))\n              )}\n            </div>\n          </div>\n          \n          <div className=\"bg-white rounded-lg shadow p-4\">\n            <h3 className=\"text-lg font-bold text-gray-900 mb-4 flex items-center\">\n              <Clock size={18} className=\"text-blue-600 dark:text-blue-400 mr-2\" />\n              In Progress\n            </h3>\n            <div className=\"space-y-2\">\n              {inProgressTasks.length === 0 ? (\n                <div className=\"text-gray-500 italic\">No tasks in progress</div>\n              ) : (\n                inProgressTasks.map(task => (\n                  <ImprovedTaskCard\n                    key={task.id}\n                    task={task}\n                    projects={projects}\n                    categories={categories}\n                    onEdit={onEditTask}\n                    onDelete={deleteTask}\n                  />\n                ))\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default TaskPlanningBoard;","import React, { useState } from 'react';\nimport { Task, Project, Category } from '../../types';\nimport { useAppContext } from '../../context/AppContextSupabase';\nimport Button from '../common/Button';\nimport { Calendar, Flag, ArrowDownCircle, Save, Plus, Target } from 'lucide-react';\nimport { formatDate } from '../../utils/helpers';\n\ninterface BackwardPlannerProps {\n  projectId?: string;\n  onClose?: () => void;\n}\n\nconst BackwardPlanner: React.FC<BackwardPlannerProps> = ({ \n  projectId,\n  onClose\n}) => {\n  const { addTask, projects, categories } = useAppContext();\n  const [step, setStep] = useState(1);\n  \n  // Track our planning inputs\n  const [goalTitle, setGoalTitle] = useState('');\n  const [goalDescription, setGoalDescription] = useState('');\n  const [targetDate, setTargetDate] = useState('');\n  const [selectedProject, setSelectedProject] = useState(projectId || '');\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n  const [milestones, setMilestones] = useState<{id: string; title: string; dueDate: string}[]>([]);\n  const [currentMilestone, setCurrentMilestone] = useState('');\n  const [currentMilestoneDate, setCurrentMilestoneDate] = useState('');\n  \n  // For the final stage\n  const [firstStepTitle, setFirstStepTitle] = useState('');\n  const [firstStepDescription, setFirstStepDescription] = useState('');\n  \n  const handleNext = () => {\n    if (step < 4) {\n      setStep(step + 1);\n    }\n  };\n  \n  const handleBack = () => {\n    if (step > 1) {\n      setStep(step - 1);\n    }\n  };\n\n  const handleAddMilestone = () => {\n    if (currentMilestone.trim()) {\n      const newMilestone = {\n        id: Date.now().toString(),\n        title: currentMilestone,\n        dueDate: currentMilestoneDate || targetDate\n      };\n      \n      setMilestones([...milestones, newMilestone]);\n      setCurrentMilestone('');\n      setCurrentMilestoneDate('');\n    }\n  };\n  \n  const handleToggleCategory = (categoryId: string) => {\n    setSelectedCategories(prevCategories => {\n      if (prevCategories.includes(categoryId)) {\n        return prevCategories.filter(id => id !== categoryId);\n      } else {\n        return [...prevCategories, categoryId];\n      }\n    });\n  };\n  \n  const handleSavePlan = () => {\n    // First, create the main goal task\n    const goalTask: Partial<Task> = {\n      title: goalTitle,\n      description: goalDescription,\n      dueDate: targetDate,\n      projectId: selectedProject || null,\n      categoryIds: selectedCategories,\n      completed: false,\n      archived: false,\n      size: 'large',\n      priority: 'high',\n    };\n    \n    const mainTask = addTask(goalTask);\n    \n    // Create milestone tasks in reverse order (backward planning)\n    let previousTaskId = null;\n    const subtaskIds: string[] = [];\n    \n    // Sort milestones by date, furthest date first (backward planning)\n    const sortedMilestones = [...milestones].sort((a, b) => \n      b.dueDate.localeCompare(a.dueDate)\n    );\n    \n    for (const milestone of sortedMilestones) {\n      const milestoneTask: Partial<Task> = {\n        title: milestone.title,\n        description: `Milestone for ${goalTitle}`,\n        dueDate: milestone.dueDate,\n        projectId: selectedProject || null,\n        categoryIds: selectedCategories,\n        completed: false,\n        archived: false,\n        size: 'medium',\n        priority: 'medium',\n        parentTaskId: mainTask.id\n      };\n      \n      const createdMilestone = addTask(milestoneTask);\n      subtaskIds.push(createdMilestone.id);\n      \n      // If we have a previous task, add it as a dependency\n      if (previousTaskId) {\n        // We could also create a more sophisticated dependency system here\n      }\n      \n      previousTaskId = createdMilestone.id;\n    }\n    \n    // Finally, create the first actionable step\n    if (firstStepTitle) {\n      const firstStep: Partial<Task> = {\n        title: firstStepTitle,\n        description: firstStepDescription,\n        dueDate: new Date().toISOString().split('T')[0], // Today\n        projectId: selectedProject || null,\n        categoryIds: selectedCategories,\n        completed: false,\n        archived: false,\n        size: 'small',\n        priority: 'high',\n        energyLevel: 'high',\n        parentTaskId: mainTask.id\n      };\n      \n      const createdFirstStep = addTask(firstStep);\n      subtaskIds.push(createdFirstStep.id);\n    }\n    \n    // Update main task with all subtasks\n    // We can't directly update subtasks because that property gets updated\n    // automatically by addTask when setting parentTaskId\n    \n    if (onClose) {\n      onClose();\n    }\n  };\n  \n  return (\n    <div className=\"bg-white rounded-lg shadow p-4\">\n      <div className=\"text-center mb-6\">\n        <h2 className=\"text-xl font-bold text-gray-900\">Backward Planning</h2>\n        <p className=\"text-gray-600\">Start with your end goal and work backward</p>\n      </div>\n      \n      <div className=\"relative mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div className={`flex flex-col items-center ${step >= 1 ? 'text-indigo-600' : 'text-gray-400'}`}>\n            <div className={`w-10 h-10 rounded-full flex items-center justify-center border-2 ${step >= 1 ? 'border-indigo-600 bg-indigo-50' : 'border-gray-300'}`}>\n              <Flag size={16} />\n            </div>\n            <span className=\"text-xs mt-1\">Goal</span>\n          </div>\n          \n          <div className={`flex-grow h-1 mx-2 ${step >= 2 ? 'bg-indigo-600' : 'bg-gray-300'}`}></div>\n          \n          <div className={`flex flex-col items-center ${step >= 2 ? 'text-indigo-600' : 'text-gray-400'}`}>\n            <div className={`w-10 h-10 rounded-full flex items-center justify-center border-2 ${step >= 2 ? 'border-indigo-600 bg-indigo-50' : 'border-gray-300'}`}>\n              <Calendar size={16} />\n            </div>\n            <span className=\"text-xs mt-1\">Timeline</span>\n          </div>\n          \n          <div className={`flex-grow h-1 mx-2 ${step >= 3 ? 'bg-indigo-600' : 'bg-gray-300'}`}></div>\n          \n          <div className={`flex flex-col items-center ${step >= 3 ? 'text-indigo-600' : 'text-gray-400'}`}>\n            <div className={`w-10 h-10 rounded-full flex items-center justify-center border-2 ${step >= 3 ? 'border-indigo-600 bg-indigo-50' : 'border-gray-300'}`}>\n              <ArrowDownCircle size={16} />\n            </div>\n            <span className=\"text-xs mt-1\">Milestones</span>\n          </div>\n          \n          <div className={`flex-grow h-1 mx-2 ${step >= 4 ? 'bg-indigo-600' : 'bg-gray-300'}`}></div>\n          \n          <div className={`flex flex-col items-center ${step >= 4 ? 'text-indigo-600' : 'text-gray-400'}`}>\n            <div className={`w-10 h-10 rounded-full flex items-center justify-center border-2 ${step >= 4 ? 'border-indigo-600 bg-indigo-50' : 'border-gray-300'}`}>\n              <Target size={16} />\n            </div>\n            <span className=\"text-xs mt-1\">First Step</span>\n          </div>\n        </div>\n      </div>\n      \n      {/* Step 1: Define the goal */}\n      {step === 1 && (\n        <div className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"goalTitle\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              What's your end goal? <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"goalTitle\"\n              value={goalTitle}\n              onChange={(e) => setGoalTitle(e.target.value)}\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n              placeholder=\"e.g., Complete website redesign\"\n            />\n          </div>\n          \n          <div>\n            <label htmlFor=\"goalDescription\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Describe what success looks like\n            </label>\n            <textarea\n              id=\"goalDescription\"\n              value={goalDescription}\n              onChange={(e) => setGoalDescription(e.target.value)}\n              rows={3}\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n              placeholder=\"What will be different when you're done?\"\n            />\n          </div>\n          \n          <div>\n            <label htmlFor=\"project\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Project\n            </label>\n            <select\n              id=\"project\"\n              value={selectedProject}\n              onChange={(e) => setSelectedProject(e.target.value)}\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n            >\n              <option value=\"\">No Project</option>\n              {projects.map(project => (\n                <option key={project.id} value={project.id}>\n                  {project.name}\n                </option>\n              ))}\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Categories\n            </label>\n            <div className=\"flex flex-wrap gap-2\">\n              {categories.map(category => (\n                <div\n                  key={category.id}\n                  className={`inline-flex items-center px-3 py-1 rounded-full text-sm cursor-pointer\n                    ${selectedCategories.includes(category.id)\n                      ? 'text-white'\n                      : 'text-gray-700 bg-opacity-25'\n                    }`}\n                  style={{ \n                    backgroundColor: selectedCategories.includes(category.id) \n                      ? category.color \n                      : `${category.color}40`\n                  }}\n                  onClick={() => handleToggleCategory(category.id)}\n                >\n                  <span>{category.name}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Step 2: Define the target date */}\n      {step === 2 && (\n        <div className=\"space-y-4\">\n          <div>\n            <label htmlFor=\"targetDate\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              When does this need to be completed? <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"date\"\n              id=\"targetDate\"\n              value={targetDate}\n              onChange={(e) => setTargetDate(e.target.value)}\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n            />\n          </div>\n          \n          <div className=\"bg-indigo-50 p-4 rounded-md\">\n            <h3 className=\"font-medium text-indigo-700 mb-2\">Planning backward</h3>\n            <p className=\"text-sm text-indigo-900\">\n              We'll start with your target date and work backward, breaking down what needs to happen\n              before the deadline. This approach works well for ADHD brains because it gives clear\n              direction and makes the path to completion more visible.\n            </p>\n          </div>\n        </div>\n      )}\n      \n      {/* Step 3: Define milestones */}\n      {step === 3 && (\n        <div className=\"space-y-4\">\n          <div className=\"bg-blue-50 p-4 rounded-md mb-4\">\n            <h3 className=\"font-medium text-blue-700\">Working backward from: {targetDate}</h3>\n            <p className=\"text-sm text-blue-900\">\n              What major milestones need to happen before your deadline? Add them in any order.\n            </p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            {milestones.map((milestone, index) => (\n              <div key={milestone.id} className=\"flex items-center bg-gray-50 p-3 rounded-md\">\n                <span className=\"font-medium\">{milestone.title}</span>\n                <span className=\"ml-auto text-sm text-gray-500\">{milestone.dueDate}</span>\n                <button\n                  className=\"ml-2 text-red-500 hover:text-red-700\"\n                  onClick={() => setMilestones(milestones.filter(m => m.id !== milestone.id))}\n                >\n                  ✕\n                </button>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"flex space-x-2\">\n            <div className=\"flex-grow\">\n              <input\n                type=\"text\"\n                value={currentMilestone}\n                onChange={(e) => setCurrentMilestone(e.target.value)}\n                className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n                placeholder=\"Add a milestone\"\n              />\n            </div>\n            <div className=\"flex-shrink-0 w-1/3\">\n              <input\n                type=\"date\"\n                value={currentMilestoneDate}\n                onChange={(e) => setCurrentMilestoneDate(e.target.value)}\n                className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n                placeholder=\"Date\"\n              />\n            </div>\n            <Button\n              variant=\"secondary\"\n              size=\"sm\"\n              icon={<Plus size={16} />}\n              onClick={handleAddMilestone}\n            >\n              Add\n            </Button>\n          </div>\n        </div>\n      )}\n      \n      {/* Step 4: Define the first actionable step */}\n      {step === 4 && (\n        <div className=\"space-y-4\">\n          <div className=\"bg-green-50 p-4 rounded-md mb-4\">\n            <h3 className=\"font-medium text-green-700\">What's the very first step?</h3>\n            <p className=\"text-sm text-green-900\">\n              Define the very first actionable step you can take to start making progress today.\n            </p>\n          </div>\n          \n          <div>\n            <label htmlFor=\"firstStepTitle\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              First action <span className=\"text-red-500\">*</span>\n            </label>\n            <input\n              type=\"text\"\n              id=\"firstStepTitle\"\n              value={firstStepTitle}\n              onChange={(e) => setFirstStepTitle(e.target.value)}\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n              placeholder=\"Something concrete you can do right away\"\n            />\n          </div>\n          \n          <div>\n            <label htmlFor=\"firstStepDescription\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Details\n            </label>\n            <textarea\n              id=\"firstStepDescription\"\n              value={firstStepDescription}\n              onChange={(e) => setFirstStepDescription(e.target.value)}\n              rows={2}\n              className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n              placeholder=\"Any details needed to get started\"\n            />\n          </div>\n          \n          <div className=\"mt-2\">\n            <p className=\"text-sm text-gray-600\">\n              This first step will be added as a high-priority, high-energy task for today.\n            </p>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"flex justify-between mt-8\">\n        {step > 1 ? (\n          <Button\n            variant=\"secondary\"\n            onClick={handleBack}\n          >\n            Back\n          </Button>\n        ) : (\n          <div></div> \n        )}\n        \n        {step < 4 ? (\n          <Button\n            variant=\"primary\"\n            onClick={handleNext}\n            disabled={step === 1 && !goalTitle || step === 2 && !targetDate}\n          >\n            Next\n          </Button>\n        ) : (\n          <Button\n            variant=\"primary\"\n            icon={<Save size={16} />}\n            onClick={handleSavePlan}\n            disabled={!firstStepTitle}\n          >\n            Create Plan\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default BackwardPlanner;","import React, { useState } from 'react';\nimport { Task, Project, Category } from '../../../types';\nimport { useAppContext } from '../../../context/AppContextSupabase';\nimport Button from '../../common/Button';\nimport { ChevronDown, ChevronRight, Save, Plus, Target, Clock, Trash2 } from 'lucide-react';\nimport { generateId } from '../../../utils/helpers';\n\ninterface ProjectBreakdownProps {\n  project: Project;\n  onClose?: () => void;\n}\n\n// Simplified breakdown structure with just phases and tasks\ninterface Phase {\n  id: string;\n  title: string;\n  description?: string;\n  expanded: boolean;\n  tasks: PhaseTask[];\n}\n\ninterface PhaseTask {\n  id: string;\n  title: string;\n  description?: string;\n}\n\nconst SimplifiedProjectBreakdown: React.FC<ProjectBreakdownProps> = ({ \n  project,\n  onClose\n}) => {\n  const { addTask, categories } = useAppContext();\n  const [phases, setPhases] = useState<Phase[]>([]);\n  const [newPhaseName, setNewPhaseName] = useState('');\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n\n  // Phase suggestions based on common project patterns\n  const phaseSuggestions = [\n    \"Planning\",\n    \"Research\",\n    \"Design\",\n    \"Development\",\n    \"Testing\",\n    \"Implementation\", \n    \"Review\",\n    \"Revision\"\n  ];\n  \n  const handleAddPhase = () => {\n    if (newPhaseName.trim()) {\n      const newPhase: Phase = {\n        id: generateId(),\n        title: newPhaseName,\n        expanded: true,\n        tasks: []\n      };\n      \n      setPhases([...phases, newPhase]);\n      setNewPhaseName('');\n    }\n  };\n\n  const handleAddSuggestedPhase = (phaseName: string) => {\n    const newPhase: Phase = {\n      id: generateId(),\n      title: phaseName,\n      expanded: true,\n      tasks: []\n    };\n    \n    setPhases([...phases, newPhase]);\n  };\n  \n  const handleAddTask = (phaseId: string) => {\n    setPhases(phases.map(phase => {\n      if (phase.id === phaseId) {\n        return {\n          ...phase,\n          tasks: [\n            ...phase.tasks,\n            {\n              id: generateId(),\n              title: \"New task\",\n            }\n          ]\n        };\n      }\n      return phase;\n    }));\n  };\n  \n  const handleUpdatePhase = (phaseId: string, updates: Partial<Phase>) => {\n    setPhases(phases.map(phase => \n      phase.id === phaseId ? { ...phase, ...updates } : phase\n    ));\n  };\n  \n  const handleUpdateTask = (phaseId: string, taskId: string, updates: Partial<PhaseTask>) => {\n    setPhases(phases.map(phase => {\n      if (phase.id === phaseId) {\n        return {\n          ...phase,\n          tasks: phase.tasks.map(task => \n            task.id === taskId ? { ...task, ...updates } : task\n          )\n        };\n      }\n      return phase;\n    }));\n  };\n  \n  const handleDeletePhase = (phaseId: string) => {\n    setPhases(phases.filter(phase => phase.id !== phaseId));\n  };\n  \n  const handleDeleteTask = (phaseId: string, taskId: string) => {\n    setPhases(phases.map(phase => {\n      if (phase.id === phaseId) {\n        return {\n          ...phase,\n          tasks: phase.tasks.filter(task => task.id !== taskId)\n        };\n      }\n      return phase;\n    }));\n  };\n  \n  const handleToggleExpand = (phaseId: string) => {\n    setPhases(phases.map(phase => \n      phase.id === phaseId ? { ...phase, expanded: !phase.expanded } : phase\n    ));\n  };\n  \n  const handleToggleCategory = (categoryId: string) => {\n    setSelectedCategories(prev => {\n      if (prev.includes(categoryId)) {\n        return prev.filter(id => id !== categoryId);\n      } else {\n        return [...prev, categoryId];\n      }\n    });\n  };\n  \n  const handleCreateTasks = () => {\n    // Create actual tasks from the breakdown\n    for (const phase of phases) {\n      for (const phaseTask of phase.tasks) {\n        const newTask: Partial<Task> = {\n          title: phaseTask.title,\n          description: phaseTask.description || '',\n          completed: false,\n          archived: false,\n          projectId: project.id,\n          categoryIds: selectedCategories,\n          parentTaskId: null,\n          size: 'medium',\n          priority: 'medium',\n          energyLevel: 'medium',\n          // Add the phase name to the task description or as a tag\n          tags: [phase.title]\n        };\n        \n        addTask(newTask);\n      }\n    }\n    \n    if (onClose) {\n      onClose();\n    }\n  };\n  \n  // Render a phase and its tasks\n  const renderPhase = (phase: Phase) => {\n    const hasChildren = phase.tasks.length > 0;\n    \n    return (\n      <div key={phase.id} className=\"mb-4\">\n        <div className=\"bg-blue-50 p-3 rounded-md mb-2 relative group\">\n          <div className=\"flex items-center\">\n            {hasChildren && (\n              <button\n                className=\"mr-2 text-gray-500 hover:text-gray-700 focus:outline-none\"\n                onClick={() => handleToggleExpand(phase.id)}\n              >\n                {phase.expanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}\n              </button>\n            )}\n            \n            <div className=\"mr-2\">\n              <Clock size={16} className=\"text-blue-600\" />\n            </div>\n            \n            <input\n              className=\"flex-grow bg-transparent border-0 focus:ring-0 p-0 font-medium\"\n              value={phase.title}\n              onChange={(e) => handleUpdatePhase(phase.id, { title: e.target.value })}\n              placeholder=\"Phase name\"\n            />\n            \n            <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2 opacity-0 group-hover:opacity-100 transition-opacity flex space-x-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"xs\"\n                icon={<Plus size={14} />}\n                onClick={() => handleAddTask(phase.id)}\n              >\n                Task\n              </Button>\n              \n              <Button\n                variant=\"ghost\"\n                size=\"xs\"\n                className=\"text-red-500 hover:text-red-700\"\n                icon={<Trash2 size={14} />}\n                onClick={() => handleDeletePhase(phase.id)}\n              >\n                Delete\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"mt-2\">\n            <textarea\n              className=\"w-full text-sm bg-blue-50 border-0 focus:ring-0 resize-none\"\n              value={phase.description || ''}\n              onChange={(e) => handleUpdatePhase(phase.id, { description: e.target.value })}\n              placeholder=\"Describe this phase (optional)...\"\n              rows={1}\n              onInput={(e) => {\n                const target = e.target as HTMLTextAreaElement;\n                target.style.height = 'auto';\n                target.style.height = `${target.scrollHeight}px`;\n              }}\n            />\n          </div>\n        </div>\n        \n        {/* Tasks */}\n        {phase.expanded && hasChildren && (\n          <div className=\"pl-6 space-y-2\">\n            {phase.tasks.map(task => (\n              <div key={task.id} className=\"bg-green-50 p-3 rounded-md relative group\">\n                <div className=\"flex items-center\">\n                  <div className=\"mr-2\">\n                    <Target size={16} className=\"text-green-600\" />\n                  </div>\n                  \n                  <input\n                    className=\"flex-grow bg-transparent border-0 focus:ring-0 p-0\"\n                    value={task.title}\n                    onChange={(e) => handleUpdateTask(phase.id, task.id, { title: e.target.value })}\n                    placeholder=\"Task title\"\n                  />\n                  \n                  <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                    <Button\n                      variant=\"ghost\"\n                      size=\"xs\"\n                      className=\"text-red-500 hover:text-red-700\"\n                      icon={<Trash2 size={14} />}\n                      onClick={() => handleDeleteTask(phase.id, task.id)}\n                    >\n                      Delete\n                    </Button>\n                  </div>\n                </div>\n                \n                <div className=\"mt-2\">\n                  <textarea\n                    className=\"w-full text-sm bg-green-50 border-0 focus:ring-0 resize-none\"\n                    value={task.description || ''}\n                    onChange={(e) => handleUpdateTask(phase.id, task.id, { description: e.target.value })}\n                    placeholder=\"Describe this task...\"\n                    rows={1}\n                    onInput={(e) => {\n                      const target = e.target as HTMLTextAreaElement;\n                      target.style.height = 'auto';\n                      target.style.height = `${target.scrollHeight}px`;\n                    }}\n                  />\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  return (\n    <div className=\"space-y-6 bg-white rounded-lg shadow p-6\">\n      <div>\n        <h2 className=\"text-xl font-bold text-gray-900 mb-1\">\n          Project Breakdown: {project.name}\n        </h2>\n        <p className=\"text-gray-600\">\n          Break down your project into phases and tasks\n        </p>\n      </div>\n      \n      <div className=\"bg-blue-50 p-4 rounded-md\">\n        <h3 className=\"font-medium text-blue-700 flex items-center mb-2\">\n          <Clock size={18} className=\"mr-2\" />\n          Project Phases\n        </h3>\n        <p className=\"text-sm text-blue-900 mb-3\">\n          Start by dividing your project into phases or stages. Then add specific tasks to each phase.\n        </p>\n        \n        <div className=\"flex space-x-2 mb-3\">\n          <input\n            type=\"text\"\n            value={newPhaseName}\n            onChange={(e) => setNewPhaseName(e.target.value)}\n            className=\"flex-grow rounded-md border-blue-300 shadow-sm focus:border-blue-500 focus:ring-blue-500 sm:text-sm\"\n            placeholder=\"Add a new phase\"\n          />\n          <Button\n            variant=\"secondary\"\n            onClick={handleAddPhase}\n          >\n            Add Phase\n          </Button>\n        </div>\n        \n        <div>\n          <h4 className=\"text-xs font-medium text-blue-800 mb-2\">Suggested phases:</h4>\n          <div className=\"flex flex-wrap gap-2\">\n            {phaseSuggestions.map(phase => (\n              <button\n                key={phase}\n                className=\"px-3 py-1 bg-white text-blue-700 rounded-full text-sm border border-blue-200 hover:bg-blue-100\"\n                onClick={() => handleAddSuggestedPhase(phase)}\n              >\n                {phase}\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"space-y-2\">\n        {phases.map(phase => renderPhase(phase))}\n        \n        {phases.length === 0 && (\n          <div className=\"text-center py-8 text-gray-500 italic\">\n            Start by adding a project phase above\n          </div>\n        )}\n      </div>\n      \n      {phases.length > 0 && phases.some(phase => phase.tasks.length > 0) && (\n        <div>\n          <div className=\"mb-4\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Categories\n            </label>\n            <div className=\"flex flex-wrap gap-2\">\n              {categories.map(category => (\n                <div\n                  key={category.id}\n                  className={`inline-flex items-center px-3 py-1 rounded-full text-sm cursor-pointer\n                    ${selectedCategories.includes(category.id)\n                      ? 'text-white'\n                      : 'text-gray-700 bg-opacity-25'\n                    }`}\n                  style={{ \n                    backgroundColor: selectedCategories.includes(category.id) \n                      ? category.color \n                      : `${category.color}40`\n                  }}\n                  onClick={() => handleToggleCategory(category.id)}\n                >\n                  <span>{category.name}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end\">\n            <Button\n              variant=\"primary\"\n              icon={<Save size={16} />}\n              onClick={handleCreateTasks}\n            >\n              Create Tasks\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SimplifiedProjectBreakdown;","import React from 'react';\nimport { Project } from '../../../types';\nimport SimplifiedProjectBreakdown from './SimplifiedProjectBreakdown';\n\ninterface ProjectBreakdownProps {\n  project: Project;\n  onClose?: () => void;\n}\n\nconst ProjectBreakdown: React.FC<ProjectBreakdownProps> = ({ \n  project,\n  onClose\n}) => {\n  // Use our new simplified breakdown component\n  return <SimplifiedProjectBreakdown project={project} onClose={onClose} />;\n};\n\nexport default ProjectBreakdown;","import React, { useState } from 'react';\nimport { useAppContext } from '../context/AppContextSupabase';\nimport { Task, Project } from '../types';\nimport { Backpack, Calendar, Target, Cpu, Menu, Clock, Plus } from 'lucide-react';\nimport Button from '../components/common/Button';\nimport Modal from '../components/common/Modal';\nimport Card from '../components/common/Card';\nimport TaskForm from '../components/tasks/TaskForm';\nimport TaskPlanningBoard from '../components/planning/TaskPlanningBoard';\nimport BackwardPlanner from '../components/planning/BackwardPlanner';\nimport ProjectBreakdown from '../components/planning/project-breakdown/ProjectBreakdown';\nimport { formatDate } from '../utils/helpers';\n\nenum PlanningMode {\n  BOARD = 'board',\n  BACKWARD = 'backward',\n  BREAKDOWN = 'breakdown',\n  TIME_BLOCK = 'timeBlock'\n}\n\nenum TimeBlockSlot {\n  MORNING = 'morning',\n  AFTERNOON = 'afternoon',\n  EVENING = 'evening'\n}\n\nconst EnhancedPlanningPage: React.FC = () => {\n  const { projects, tasks, getDailyPlan, saveDailyPlan } = useAppContext();\n  \n  // State\n  const [activeMode, setActiveMode] = useState<PlanningMode>(PlanningMode.BOARD);\n  const [selectedProjectId, setSelectedProjectId] = useState<string>('');\n  const [isTaskModalOpen, setIsTaskModalOpen] = useState(false);\n  const [editingTask, setEditingTask] = useState<Task | null>(null);\n  \n  // Get the current day's plan\n  const today = formatDate(new Date());\n  const todayPlan = getDailyPlan(today);\n  \n  // Time blocking state\n  const [selectedTimeBlock, setSelectedTimeBlock] = useState<TimeBlockSlot | null>(null);\n  const [availableTasks, setAvailableTasks] = useState<Task[]>([]);\n  const [morningTasks, setMorningTasks] = useState<Task[]>([]);\n  const [afternoonTasks, setAfternoonTasks] = useState<Task[]>([]);\n  const [eveningTasks, setEveningTasks] = useState<Task[]>([]);\n  \n  // Filter projects that have at least one task\n  const activeProjects = projects.filter(project => \n    tasks.some(task => task.projectId === project.id && !task.completed && !task.archived)\n  );\n  \n  const selectedProject = projects.find(p => p.id === selectedProjectId);\n  \n  const handleOpenTaskModal = (task?: Task) => {\n    if (task) {\n      setEditingTask(task);\n    } else {\n      setEditingTask(null);\n    }\n    setIsTaskModalOpen(true);\n  };\n  \n  const handleCloseTaskModal = () => {\n    setIsTaskModalOpen(false);\n    setEditingTask(null);\n  };\n  \n  const handleTimeBlockDragStart = (taskId: string) => {\n    // Add drag logic\n  };\n  \n  const handleTimeBlockDragEnd = (taskId: string, slot: TimeBlockSlot) => {\n    // Add drop logic\n  };\n  \n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row justify-between md:items-center bg-white rounded-lg shadow-sm p-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Planning Studio</h1>\n          <p className=\"text-gray-600\">\n            Plan your projects and tasks in a way that works for your brain\n          </p>\n        </div>\n        <div className=\"mt-4 md:mt-0 flex space-x-2\">\n          <Button\n            variant=\"primary\"\n            icon={<Plus size={16} />}\n            onClick={() => handleOpenTaskModal()}\n          >\n            New Task\n          </Button>\n        </div>\n      </div>\n      \n      {/* Planning Modes Tabs */}\n      <div className=\"flex flex-wrap bg-white rounded-lg shadow-sm\">\n        <button\n          className={`flex items-center px-4 py-3 ${\n            activeMode === PlanningMode.BOARD \n              ? 'bg-indigo-50 text-indigo-700 border-b-2 border-indigo-500'\n              : 'text-gray-600 hover:bg-gray-50'\n          }`}\n          onClick={() => setActiveMode(PlanningMode.BOARD)}\n        >\n          <Backpack size={18} className=\"mr-2\" />\n          <span>Planning Board</span>\n        </button>\n        \n        <button\n          className={`flex items-center px-4 py-3 ${\n            activeMode === PlanningMode.BACKWARD \n              ? 'bg-indigo-50 text-indigo-700 border-b-2 border-indigo-500'\n              : 'text-gray-600 hover:bg-gray-50'\n          }`}\n          onClick={() => setActiveMode(PlanningMode.BACKWARD)}\n        >\n          <Target size={18} className=\"mr-2\" />\n          <span>Backward Planning</span>\n        </button>\n        \n        <button\n          className={`flex items-center px-4 py-3 ${\n            activeMode === PlanningMode.BREAKDOWN \n              ? 'bg-indigo-50 text-indigo-700 border-b-2 border-indigo-500'\n              : 'text-gray-600 hover:bg-gray-50'\n          }`}\n          onClick={() => setActiveMode(PlanningMode.BREAKDOWN)}\n        >\n          <Menu size={18} className=\"mr-2\" />\n          <span>Project Breakdown</span>\n        </button>\n        \n        <button\n          className={`flex items-center px-4 py-3 ${\n            activeMode === PlanningMode.TIME_BLOCK \n              ? 'bg-indigo-50 text-indigo-700 border-b-2 border-indigo-500'\n              : 'text-gray-600 hover:bg-gray-50'\n          }`}\n          onClick={() => setActiveMode(PlanningMode.TIME_BLOCK)}\n        >\n          <Clock size={18} className=\"mr-2\" />\n          <span>Time Blocking</span>\n        </button>\n      </div>\n\n      {/* Project Selection (for Board and Breakdown modes) */}\n      {(activeMode === PlanningMode.BOARD || activeMode === PlanningMode.BREAKDOWN) && (\n        <div className=\"bg-white rounded-lg shadow-sm p-4\">\n          <label htmlFor=\"projectSelect\" className=\"block text-sm font-medium text-gray-700 mb-2\">\n            Select Project\n          </label>\n          <select\n            id=\"projectSelect\"\n            value={selectedProjectId}\n            onChange={(e) => setSelectedProjectId(e.target.value)}\n            className=\"block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm\"\n          >\n            <option value=\"\">All Projects</option>\n            {activeProjects.map(project => (\n              <option key={project.id} value={project.id}>\n                {project.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      )}\n      \n      {/* Active Planning Tool */}\n      <div>\n        {/* Planning Board Mode */}\n        {activeMode === PlanningMode.BOARD && (\n          <TaskPlanningBoard \n            projectId={selectedProjectId || undefined}\n            onEditTask={handleOpenTaskModal}\n          />\n        )}\n        \n        {/* Backward Planning Mode */}\n        {activeMode === PlanningMode.BACKWARD && (\n          <BackwardPlanner \n            projectId={selectedProjectId || undefined}\n          />\n        )}\n        \n        {/* Project Breakdown Mode */}\n        {activeMode === PlanningMode.BREAKDOWN && selectedProject && (\n          <ProjectBreakdown project={selectedProject} />\n        )}\n        \n        {/* Project Breakdown - No Project Selected */}\n        {activeMode === PlanningMode.BREAKDOWN && !selectedProject && (\n          <Card>\n            <div className=\"text-center py-8\">\n              <Cpu size={48} className=\"mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-900 mb-1\">Select a Project</h3>\n              <p className=\"text-gray-600\">\n                Please select a project to use the breakdown planning tool\n              </p>\n            </div>\n          </Card>\n        )}\n        \n        {/* Time Blocking Mode */}\n        {activeMode === PlanningMode.TIME_BLOCK && (\n          <div className=\"space-y-4\">\n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\n              <h2 className=\"text-xl font-bold text-gray-900 mb-4 flex items-center\">\n                <Calendar size={20} className=\"mr-2 text-indigo-500\" />\n                Today's Time Blocks\n              </h2>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                {/* Morning Block */}\n                <div className=\"bg-blue-50 rounded-lg p-4\">\n                  <h3 className=\"font-medium text-gray-900 mb-2\">Morning</h3>\n                  <div \n                    className=\"min-h-[200px] bg-white rounded-lg p-3 border-2 border-dashed border-blue-200\"\n                    onDragOver={(e) => e.preventDefault()}\n                    onDrop={() => handleTimeBlockDragEnd('', TimeBlockSlot.MORNING)}\n                  >\n                    {morningTasks.length === 0 ? (\n                      <div className=\"text-center py-4 text-gray-400 italic\">\n                        Drop tasks here\n                      </div>\n                    ) : (\n                      <div className=\"space-y-2\">\n                        {morningTasks.map(task => (\n                          <div \n                            key={task.id}\n                            className=\"bg-blue-100 p-2 rounded\"\n                            draggable\n                            onDragStart={() => handleTimeBlockDragStart(task.id)}\n                          >\n                            {task.title}\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                {/* Afternoon Block */}\n                <div className=\"bg-yellow-50 rounded-lg p-4\">\n                  <h3 className=\"font-medium text-gray-900 mb-2\">Afternoon</h3>\n                  <div \n                    className=\"min-h-[200px] bg-white rounded-lg p-3 border-2 border-dashed border-yellow-200\"\n                    onDragOver={(e) => e.preventDefault()}\n                    onDrop={() => handleTimeBlockDragEnd('', TimeBlockSlot.AFTERNOON)}\n                  >\n                    {afternoonTasks.length === 0 ? (\n                      <div className=\"text-center py-4 text-gray-400 italic\">\n                        Drop tasks here\n                      </div>\n                    ) : (\n                      <div className=\"space-y-2\">\n                        {afternoonTasks.map(task => (\n                          <div \n                            key={task.id}\n                            className=\"bg-yellow-100 p-2 rounded\"\n                            draggable\n                            onDragStart={() => handleTimeBlockDragStart(task.id)}\n                          >\n                            {task.title}\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n                \n                {/* Evening Block */}\n                <div className=\"bg-purple-50 rounded-lg p-4\">\n                  <h3 className=\"font-medium text-gray-900 mb-2\">Evening</h3>\n                  <div \n                    className=\"min-h-[200px] bg-white rounded-lg p-3 border-2 border-dashed border-purple-200\"\n                    onDragOver={(e) => e.preventDefault()}\n                    onDrop={() => handleTimeBlockDragEnd('', TimeBlockSlot.EVENING)}\n                  >\n                    {eveningTasks.length === 0 ? (\n                      <div className=\"text-center py-4 text-gray-400 italic\">\n                        Drop tasks here\n                      </div>\n                    ) : (\n                      <div className=\"space-y-2\">\n                        {eveningTasks.map(task => (\n                          <div \n                            key={task.id}\n                            className=\"bg-purple-100 p-2 rounded\"\n                            draggable\n                            onDragStart={() => handleTimeBlockDragStart(task.id)}\n                          >\n                            {task.title}\n                          </div>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-white rounded-lg shadow-sm p-6\">\n              <h2 className=\"text-lg font-bold text-gray-900 mb-4\">Available Tasks</h2>\n              \n              <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-3\">\n                {tasks\n                  .filter(t => !t.completed && !t.archived)\n                  .slice(0, 12)\n                  .map(task => (\n                    <div \n                      key={task.id}\n                      className=\"bg-gray-50 p-3 rounded-lg shadow-sm\"\n                      draggable\n                      onDragStart={() => handleTimeBlockDragStart(task.id)}\n                    >\n                      <h3 className=\"font-medium text-gray-800\">{task.title}</h3>\n                      {task.dueDate && (\n                        <p className=\"text-xs text-gray-500\">Due: {task.dueDate}</p>\n                      )}\n                    </div>\n                  ))\n                }\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n      \n      {/* Task Modal */}\n      <Modal\n        isOpen={isTaskModalOpen}\n        onClose={handleCloseTaskModal}\n        title={editingTask ? 'Edit Task' : 'Create New Task'}\n        size=\"3xl\"\n      >\n        <TaskForm\n          task={editingTask || undefined}\n          onClose={handleCloseTaskModal}\n          isEdit={!!editingTask}\n        />\n      </Modal>\n    </div>\n  );\n};\n\nexport default EnhancedPlanningPage;"],"names":["ArrowDownCircle","createLucideIcon","Backpack","Cpu","Flag","QuickTaskInput","onTaskAdded","defaultProjectId","defaultDueDate","addTask","projects","categories","useAppContext","isExpanded","setIsExpanded","useState","title","setTitle","dueDate","setDueDate","projectId","setProjectId","categoryIds","setCategoryIds","priority","setPriority","urgency","setUrgency","emotionalWeight","setEmotionalWeight","energyRequired","setEnergyRequired","showCategoryPicker","setShowCategoryPicker","showProjectPicker","setShowProjectPicker","inputRef","useRef","useEffect","handleSubmit","e","newTask","toggleCategory","categoryId","prev","id","processTitle","input","processedText","cleanedText","date","extractDateFromText","formatDateString","projectMatch","projectName","matchedProject","p","categoryMatches","newCategoryIds","match","categoryName","matchedCategory","c","getPriorityColor","getUrgencyColor","getEnergyColor","getEmotionalColor","jsx","jsxs","Plus","getTodayString","Calendar","formatDate","Circle","Folder","_a","project","Tag","category","Flame","Battery","Brain","dateString","today","tomorrow","TaskPlanningBoard","onEditTask","tasks","updateTask","deleteTask","viewMode","setViewMode","filteredTasks","task","backlogTasks","planningTasks","subtaskId","subtask","t","readyTasks","inProgressTasks","doneTasks","handleMoveTask","targetColumn","updatedTask","handleCreateSubtask","parentTask","createdTask","renderTaskColumn","icon","columnType","color","ImprovedTaskCard","ArrowLeft","ArrowRight","Fragment","Menu","LayoutGrid","List","Download","Target","Clock","Button","BackwardPlanner","onClose","step","setStep","goalTitle","setGoalTitle","goalDescription","setGoalDescription","targetDate","setTargetDate","selectedProject","setSelectedProject","selectedCategories","setSelectedCategories","milestones","setMilestones","currentMilestone","setCurrentMilestone","currentMilestoneDate","setCurrentMilestoneDate","firstStepTitle","setFirstStepTitle","firstStepDescription","setFirstStepDescription","handleNext","handleBack","handleAddMilestone","newMilestone","handleToggleCategory","prevCategories","handleSavePlan","mainTask","subtaskIds","sortedMilestones","a","b","milestone","milestoneTask","createdMilestone","firstStep","createdFirstStep","index","m","Save","SimplifiedProjectBreakdown","phases","setPhases","newPhaseName","setNewPhaseName","phaseSuggestions","handleAddPhase","newPhase","generateId","handleAddSuggestedPhase","phaseName","handleAddTask","phaseId","phase","handleUpdatePhase","updates","handleUpdateTask","taskId","handleDeletePhase","handleDeleteTask","handleToggleExpand","handleCreateTasks","phaseTask","renderPhase","hasChildren","ChevronDown","ChevronRight","Trash2","target","ProjectBreakdown","EnhancedPlanningPage","getDailyPlan","saveDailyPlan","activeMode","setActiveMode","selectedProjectId","setSelectedProjectId","isTaskModalOpen","setIsTaskModalOpen","editingTask","setEditingTask","morningTasks","setMorningTasks","afternoonTasks","setAfternoonTasks","eveningTasks","setEveningTasks","activeProjects","handleOpenTaskModal","handleCloseTaskModal","handleTimeBlockDragStart","handleTimeBlockDragEnd","slot","Card","Modal","TaskForm"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}