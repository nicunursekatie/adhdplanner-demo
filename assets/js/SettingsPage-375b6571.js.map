{"version":3,"file":"SettingsPage-375b6571.js","sources":["../../../src/components/settings/DuplicateCleanupLocal.tsx","../../../src/pages/SettingsPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Trash2, AlertCircle, CheckCircle, XCircle, Loader2, Users, Tag } from 'lucide-react';\nimport Button from '../common/Button';\nimport Card from '../common/Card';\nimport { useAppContext } from '../../context/AppContext';\nimport { Task, Project, Category } from '../../types';\n\ninterface DuplicateTaskGroup {\n  key: string;\n  tasks: Task[];\n  selectedToKeep: string | null;\n}\n\ninterface DuplicateProjectGroup {\n  key: string;\n  projects: Project[];\n  selectedToKeep: string | null;\n}\n\ninterface DuplicateCategoryGroup {\n  key: string;\n  categories: Category[];\n  selectedToKeep: string | null;\n}\n\ntype DuplicateGroup = DuplicateTaskGroup | DuplicateProjectGroup | DuplicateCategoryGroup;\n\nexport const DuplicateCleanupLocal: React.FC = () => {\n  const { tasks, projects, categories, deleteTask, deleteProject, deleteCategory } = useAppContext();\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const [isCleaningUp, setIsCleaningUp] = useState(false);\n  const [duplicateTaskGroups, setDuplicateTaskGroups] = useState<DuplicateTaskGroup[]>([]);\n  const [duplicateProjectGroups, setDuplicateProjectGroups] = useState<DuplicateProjectGroup[]>([]);\n  const [duplicateCategoryGroups, setDuplicateCategoryGroups] = useState<DuplicateCategoryGroup[]>([]);\n  const [activeTab, setActiveTab] = useState<'tasks' | 'projects' | 'categories'>('tasks');\n  const [error, setError] = useState<string | null>(null);\n  const [cleanupComplete, setCleanupComplete] = useState(false);\n  \n  useEffect(() => {\n    if (tasks.length > 0 || projects.length > 0 || categories.length > 0) {\n      analyzeDuplicates();\n    }\n  }, [tasks, projects, categories]);\n  \n  const analyzeDuplicates = () => {\n    setIsAnalyzing(true);\n    setError(null);\n    \n    try {\n      // Analyze task duplicates\n      const taskGroups = new Map<string, Task[]>();\n      \n      tasks.forEach(task => {\n        // Create a key based on title and description (normalized)\n        const titlePart = (task.title || '')\n          .trim()\n          .toLowerCase()\n          .replace(/\\s+/g, ' '); // Normalize whitespace\n        const descPart = (task.description || '')\n          .trim()\n          .toLowerCase()\n          .replace(/\\s+/g, ' '); // Normalize whitespace\n        const key = `${titlePart}|${descPart}`;\n        \n        if (!taskGroups.has(key)) {\n          taskGroups.set(key, []);\n        }\n        taskGroups.get(key)!.push(task);\n      });\n      \n      // Filter to only groups with duplicates (more than 1 task)\n      const duplicateTasks: DuplicateTaskGroup[] = [];\n      taskGroups.forEach((groupTasks, key) => {\n        if (groupTasks.length > 1) {\n          // Sort by creation date, keeping the oldest as the suggested one to keep\n          const sortedTasks = groupTasks.sort((a, b) => \n            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n          );\n          \n          duplicateTasks.push({\n            key,\n            tasks: sortedTasks,\n            selectedToKeep: sortedTasks[0].id // Default to keeping the oldest\n          });\n        }\n      });\n      \n      // Analyze project duplicates\n      const projectGroups = new Map<string, Project[]>();\n      \n      projects.forEach(project => {\n        // Create a key based on name and description (normalized)\n        const namePart = (project.name || '')\n          .trim()\n          .toLowerCase()\n          .replace(/\\s+/g, ' ');\n        const descPart = (project.description || '')\n          .trim()\n          .toLowerCase()\n          .replace(/\\s+/g, ' ');\n        const key = `${namePart}|${descPart}`;\n        \n        if (!projectGroups.has(key)) {\n          projectGroups.set(key, []);\n        }\n        projectGroups.get(key)!.push(project);\n      });\n      \n      // Filter to only groups with duplicates (more than 1 project)\n      const duplicateProjects: DuplicateProjectGroup[] = [];\n      projectGroups.forEach((groupProjects, key) => {\n        if (groupProjects.length > 1) {\n          // Sort by creation date, keeping the oldest as the suggested one to keep\n          const sortedProjects = groupProjects.sort((a, b) => \n            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n          );\n          \n          duplicateProjects.push({\n            key,\n            projects: sortedProjects,\n            selectedToKeep: sortedProjects[0].id // Default to keeping the oldest\n          });\n        }\n      });\n      \n      // Analyze category duplicates\n      const categoryGroups = new Map<string, Category[]>();\n      \n      categories.forEach(category => {\n        // Create a key based on name and color (normalized)\n        const namePart = (category.name || '')\n          .trim()\n          .toLowerCase()\n          .replace(/\\s+/g, ' ');\n        const colorPart = (category.color || '').toLowerCase();\n        const key = `${namePart}|${colorPart}`;\n        \n        if (!categoryGroups.has(key)) {\n          categoryGroups.set(key, []);\n        }\n        categoryGroups.get(key)!.push(category);\n      });\n      \n      // Filter to only groups with duplicates (more than 1 category)\n      const duplicateCategories: DuplicateCategoryGroup[] = [];\n      categoryGroups.forEach((groupCategories, key) => {\n        if (groupCategories.length > 1) {\n          // Sort by creation date, keeping the oldest as the suggested one to keep\n          const sortedCategories = groupCategories.sort((a, b) => \n            new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()\n          );\n          \n          duplicateCategories.push({\n            key,\n            categories: sortedCategories,\n            selectedToKeep: sortedCategories[0].id // Default to keeping the oldest\n          });\n        }\n      });\n      \n      setDuplicateTaskGroups(duplicateTasks);\n      setDuplicateProjectGroups(duplicateProjects);\n      setDuplicateCategoryGroups(duplicateCategories);\n    } catch (err) {\n      console.error('Error analyzing duplicates:', err);\n      setError('Failed to analyze duplicates');\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n  \n  const handleTaskKeepSelection = (groupKey: string, taskId: string) => {\n    setDuplicateTaskGroups(prev =>\n      prev.map(group =>\n        group.key === groupKey\n          ? { ...group, selectedToKeep: taskId }\n          : group\n      )\n    );\n  };\n  \n  const handleProjectKeepSelection = (groupKey: string, projectId: string) => {\n    setDuplicateProjectGroups(prev =>\n      prev.map(group =>\n        group.key === groupKey\n          ? { ...group, selectedToKeep: projectId }\n          : group\n      )\n    );\n  };\n  \n  const handleCategoryKeepSelection = (groupKey: string, categoryId: string) => {\n    setDuplicateCategoryGroups(prev =>\n      prev.map(group =>\n        group.key === groupKey\n          ? { ...group, selectedToKeep: categoryId }\n          : group\n      )\n    );\n  };\n  \n  const cleanupDuplicates = async () => {\n    setIsCleaningUp(true);\n    setError(null);\n    \n    try {\n      let totalDeletedTasks = 0;\n      let totalDeletedProjects = 0;\n      let totalDeletedCategories = 0;\n      \n      // Clean up duplicate tasks\n      if (activeTab === 'tasks') {\n        for (const group of duplicateTaskGroups) {\n          if (!group.selectedToKeep) continue;\n          \n          // Delete all tasks except the selected one to keep\n          const tasksToDelete = group.tasks.filter(task => task.id !== group.selectedToKeep);\n          \n          for (const task of tasksToDelete) {\n            try {\n              deleteTask(task.id);\n              totalDeletedTasks++;\n              console.log(`Deleted duplicate task: ${task.title} (ID: ${task.id})`);\n            } catch (err) {\n              console.error(`Failed to delete task ${task.id}:`, err);\n              setError(`Failed to delete some tasks. Partial cleanup completed.`);\n            }\n          }\n        }\n      } else if (activeTab === 'projects') {\n        // Clean up duplicate projects\n        for (const group of duplicateProjectGroups) {\n          if (!group.selectedToKeep) continue;\n          \n          // Delete all projects except the selected one to keep\n          const projectsToDelete = group.projects.filter(project => project.id !== group.selectedToKeep);\n          \n          for (const project of projectsToDelete) {\n            try {\n              deleteProject(project.id);\n              totalDeletedProjects++;\n              console.log(`Deleted duplicate project: ${project.name} (ID: ${project.id})`);\n            } catch (err) {\n              console.error(`Failed to delete project ${project.id}:`, err);\n              setError(`Failed to delete some projects. Partial cleanup completed.`);\n            }\n          }\n        }\n      } else {\n        // Clean up duplicate categories\n        for (const group of duplicateCategoryGroups) {\n          if (!group.selectedToKeep) continue;\n          \n          // Delete all categories except the selected one to keep\n          const categoriesToDelete = group.categories.filter(category => category.id !== group.selectedToKeep);\n          \n          for (const category of categoriesToDelete) {\n            try {\n              deleteCategory(category.id);\n              totalDeletedCategories++;\n              console.log(`Deleted duplicate category: ${category.name} (ID: ${category.id})`);\n            } catch (err) {\n              console.error(`Failed to delete category ${category.id}:`, err);\n              setError(`Failed to delete some categories. Partial cleanup completed.`);\n            }\n          }\n        }\n      }\n      \n      const totalDeleted = totalDeletedTasks + totalDeletedProjects + totalDeletedCategories;\n      const itemType = activeTab === 'tasks' ? 'tasks' : activeTab === 'projects' ? 'projects' : 'categories';\n      console.log(`Cleanup completed. Deleted ${totalDeleted} duplicate ${itemType}.`);\n      \n      // Show success only if we actually deleted something\n      if (totalDeleted > 0) {\n        setCleanupComplete(true);\n        // Clear duplicate groups since cleanup is done\n        if (activeTab === 'tasks') {\n          setDuplicateTaskGroups([]);\n        } else if (activeTab === 'projects') {\n          setDuplicateProjectGroups([]);\n        } else {\n          setDuplicateCategoryGroups([]);\n        }\n      } else {\n        setError('No duplicates were deleted. Please check the console for errors.');\n      }\n      \n    } catch (err) {\n      console.error('Cleanup error:', err);\n      setError('Cleanup failed. Please try again.');\n    } finally {\n      setIsCleaningUp(false);\n    }\n  };\n  \n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  \n  if (isAnalyzing) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"text-center\">\n          <Loader2 className=\"w-12 h-12 text-blue-500 mx-auto mb-4 animate-spin\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Analyzing Data</h3>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Checking for duplicate tasks, projects, and categories...\n          </p>\n        </div>\n      </Card>\n    );\n  }\n  \n  if (cleanupComplete) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"text-center\">\n          <CheckCircle className=\"w-12 h-12 text-green-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">Cleanup Complete</h3>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Duplicate items have been successfully removed.\n          </p>\n          <Button\n            onClick={() => {\n              setCleanupComplete(false);\n              analyzeDuplicates();\n            }}\n            variant=\"secondary\"\n            className=\"mt-4\"\n          >\n            Analyze Again\n          </Button>\n        </div>\n      </Card>\n    );\n  }\n  \n  const currentGroups = activeTab === 'tasks' \n    ? duplicateTaskGroups \n    : activeTab === 'projects' \n      ? duplicateProjectGroups \n      : duplicateCategoryGroups;\n  const hasAnyDuplicates = duplicateTaskGroups.length > 0 || duplicateProjectGroups.length > 0 || duplicateCategoryGroups.length > 0;\n  \n  if (!hasAnyDuplicates) {\n    return (\n      <Card className=\"p-6\">\n        <div className=\"text-center\">\n          <CheckCircle className=\"w-12 h-12 text-green-500 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">No Duplicates Found</h3>\n          <p className=\"text-gray-600 dark:text-gray-400\">\n            Your database looks clean! No duplicate tasks, projects, or categories were detected.\n          </p>\n          <Button\n            onClick={analyzeDuplicates}\n            variant=\"secondary\"\n            className=\"mt-4\"\n          >\n            Analyze Again\n          </Button>\n        </div>\n      </Card>\n    );\n  }\n  \n  return (\n    <Card className=\"p-6\">\n      <div className=\"flex items-center mb-6\">\n        <Users className=\"w-6 h-6 text-amber-500 mr-3\" />\n        <h2 className=\"text-xl font-semibold\">Duplicate Cleanup</h2>\n      </div>\n      \n      {error && (\n        <div className=\"mb-6 p-4 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-400 rounded-lg\">\n          {error}\n        </div>\n      )}\n      \n      {/* Tab navigation */}\n      <div className=\"mb-6 border-b border-gray-200 dark:border-gray-700\">\n        <nav className=\"-mb-px flex space-x-8\">\n          <button\n            onClick={() => setActiveTab('tasks')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm ${\n              activeTab === 'tasks'\n                ? 'border-blue-500 text-blue-600 dark:text-blue-400'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'\n            }`}\n          >\n            Tasks ({duplicateTaskGroups.length} groups)\n          </button>\n          <button\n            onClick={() => setActiveTab('projects')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm ${\n              activeTab === 'projects'\n                ? 'border-blue-500 text-blue-600 dark:text-blue-400'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'\n            }`}\n          >\n            Projects ({duplicateProjectGroups.length} groups)\n          </button>\n          <button\n            onClick={() => setActiveTab('categories')}\n            className={`py-2 px-1 border-b-2 font-medium text-sm ${\n              activeTab === 'categories'\n                ? 'border-blue-500 text-blue-600 dark:text-blue-400'\n                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 dark:text-gray-400 dark:hover:text-gray-300'\n            }`}\n          >\n            Categories ({duplicateCategoryGroups.length} groups)\n          </button>\n        </nav>\n      </div>\n      \n      <div className=\"mb-6\">\n        <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n          {activeTab === 'tasks' ? (\n            <>Found {duplicateTaskGroups.length} groups of duplicate tasks.</>\n          ) : activeTab === 'projects' ? (\n            <>Found {duplicateProjectGroups.length} groups of duplicate projects.</>\n          ) : (\n            <>Found {duplicateCategoryGroups.length} groups of duplicate categories.</>\n          )}\n          {' '}Select which version to keep for each group, then click \"Clean Up Duplicates\" to remove the others.\n        </p>\n        \n        <div className=\"space-y-6\">\n          {currentGroups.length === 0 ? (\n            <div className=\"text-center py-8 border border-gray-200 dark:border-gray-700 rounded-lg\">\n              <p className=\"text-gray-500 dark:text-gray-400\">\n                No duplicate {activeTab === 'tasks' ? 'tasks' : activeTab === 'projects' ? 'projects' : 'categories'} found.\n              </p>\n            </div>\n          ) : (\n            // Render the appropriate duplicate groups based on activeTab\n            currentGroups.map((group, groupIndex) => (\n              <div key={group.key} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                <h4 className=\"font-medium mb-3 text-gray-900 dark:text-gray-100\">\n                  Duplicate Group {groupIndex + 1} ({(group as any).tasks?.length || (group as any).projects?.length || (group as any).categories?.length} copies)\n                </h4>\n                \n                <div className=\"space-y-3\">\n                  {(activeTab === 'tasks' ? (group as DuplicateTaskGroup).tasks : \n                    activeTab === 'projects' ? (group as DuplicateProjectGroup).projects :\n                    (group as DuplicateCategoryGroup).categories).map((item: any) => (\n                    <div\n                      key={item.id}\n                      className={`p-3 rounded border-2 transition-colors ${\n                        group.selectedToKeep === item.id\n                          ? 'border-green-500 bg-green-50 dark:bg-green-900/20'\n                          : 'border-gray-200 dark:border-gray-600 hover:border-gray-300 dark:hover:border-gray-500'\n                      }`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center space-x-3\">\n                            <input\n                              type=\"radio\"\n                              name={`group-${group.key}`}\n                              checked={group.selectedToKeep === item.id}\n                              onChange={() => {\n                                if (activeTab === 'tasks') {\n                                  handleTaskKeepSelection(group.key, item.id);\n                                } else if (activeTab === 'projects') {\n                                  handleProjectKeepSelection(group.key, item.id);\n                                } else {\n                                  handleCategoryKeepSelection(group.key, item.id);\n                                }\n                              }}\n                              className=\"w-4 h-4 text-green-600\"\n                            />\n                            <div>\n                              {activeTab === 'categories' && (\n                                <div className=\"flex items-center space-x-3 mb-2\">\n                                  <div\n                                    className=\"w-6 h-6 rounded-full border-2 border-gray-300\"\n                                    style={{ backgroundColor: item.color }}\n                                  />\n                                </div>\n                              )}\n                              <p className=\"font-medium text-gray-900 dark:text-gray-100\">\n                                {item.title || item.name}\n                              </p>\n                              {item.description && (\n                                <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                                  {item.description}\n                                </p>\n                              )}\n                              <div className=\"flex items-center space-x-4 mt-2 text-xs text-gray-500 dark:text-gray-400\">\n                                <span>Created: {formatDate(item.createdAt)}</span>\n                                <span>Updated: {formatDate(item.updatedAt)}</span>\n                                <span>ID: {item.id.slice(0, 8)}...</span>\n                                {item.completed && (\n                                  <span className=\"text-green-600 dark:text-green-400\">\n                                    ✓ Completed\n                                  </span>\n                                )}\n                                {activeTab === 'projects' && (\n                                  <span className=\"px-2 py-0.5 rounded-full text-white\" style={{ backgroundColor: item.color }}>\n                                    {item.color}\n                                  </span>\n                                )}\n                                {activeTab === 'categories' && (\n                                  <span>Color: {item.color}</span>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                        \n                        {group.selectedToKeep === item.id && (\n                          <div className=\"flex items-center text-green-600 dark:text-green-400\">\n                            <CheckCircle className=\"w-5 h-5 mr-1\" />\n                            <span className=\"text-sm font-medium\">Keep</span>\n                          </div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n      \n      <div className=\"flex justify-between items-center\">\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          {isCleaningUp \n            ? 'Cleanup in progress. Please do not close this window...' \n            : activeTab === 'tasks'\n              ? `Ready to clean up ${duplicateTaskGroups.reduce((total, group) => total + group.tasks.length - 1, 0)} duplicate tasks.`\n              : activeTab === 'projects'\n                ? `Ready to clean up ${duplicateProjectGroups.reduce((total, group) => total + group.projects.length - 1, 0)} duplicate projects.`\n                : `Ready to clean up ${duplicateCategoryGroups.reduce((total, group) => total + group.categories.length - 1, 0)} duplicate categories.`}\n        </p>\n        <div className=\"space-x-3\">\n          <Button\n            onClick={analyzeDuplicates}\n            disabled={isCleaningUp}\n            variant=\"secondary\"\n          >\n            Re-analyze\n          </Button>\n          <Button\n            onClick={cleanupDuplicates}\n            disabled={isCleaningUp || currentGroups.length === 0 || (activeTab === 'tasks' \n              ? duplicateTaskGroups.some(group => !group.selectedToKeep)\n              : activeTab === 'projects'\n                ? duplicateProjectGroups.some(group => !group.selectedToKeep)\n                : duplicateCategoryGroups.some(group => !group.selectedToKeep))}\n            variant=\"danger\"\n          >\n            {isCleaningUp ? (\n              <>\n                <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\n                Cleaning Up...\n              </>\n            ) : (\n              <>\n                <Trash2 className=\"w-4 h-4 mr-2\" />\n                Clean Up Duplicates\n              </>\n            )}\n          </Button>\n        </div>\n      </div>\n    </Card>\n  );\n};","import React, { useState } from 'react';\nimport { useAppContext } from '../context/AppContext';\nimport Card from '../components/common/Card';\nimport Button from '../components/common/Button';\nimport Modal from '../components/common/Modal';\nimport AISettings from '../components/settings/AISettings';\nimport { DuplicateCleanupLocal } from '../components/settings/DuplicateCleanupLocal';\nimport { Download, Upload, Trash2, AlertCircle, Brain, ChevronDown, ChevronUp, Tag, Plus, Edit2, X, Clock, Eye, Users } from 'lucide-react';\nimport { Category } from '../types';\n\nconst SettingsPage: React.FC = () => {\n  const { exportData, importData, resetData, initializeSampleData, categories, addCategory, updateCategory, deleteCategory, settings, updateSettings } = useAppContext();\n  \n  const [importModalOpen, setImportModalOpen] = useState(false);\n  const [resetModalOpen, setResetModalOpen] = useState(false);\n  const [importFile, setImportFile] = useState<File | null>(null);\n  const [importError, setImportError] = useState<string | null>(null);\n  const [importSuccess, setImportSuccess] = useState(false);\n  const [showAISettings, setShowAISettings] = useState(false);\n  const [showCategories, setShowCategories] = useState(false);\n  const [categoryModalOpen, setCategoryModalOpen] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [categoryName, setCategoryName] = useState('');\n  const [categoryColor, setCategoryColor] = useState('#6366f1');\n  const [deleteCategoryId, setDeleteCategoryId] = useState<string | null>(null);\n  const [showTimeManagement, setShowTimeManagement] = useState(false);\n  const [showVisualPreferences, setShowVisualPreferences] = useState(false);\n  const [showDuplicateCleanup, setShowDuplicateCleanup] = useState(false);\n  \n  const handleExportData = () => {\n    const data = exportData();\n    const blob = new Blob([data], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    \n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `taskmanager-export-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    \n    // Clean up\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n  \n  const handleImportClick = () => {\n    setImportModalOpen(true);\n    setImportFile(null);\n    setImportError(null);\n    setImportSuccess(false);\n  };\n  \n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      setImportFile(e.target.files[0]);\n      setImportError(null);\n    }\n  };\n  \n  const handleImportData = () => {\n    if (!importFile) {\n      setImportError('Please select a file to import');\n      return;\n    }\n    \n    const reader = new FileReader();\n    \n    reader.onload = (e) => {\n      try {\n        const content = e.target?.result as string;\n        const result = importData(content);\n        \n        if (result) {\n          setImportSuccess(true);\n          setImportError(null);\n          \n          // Close modal after success\n          setTimeout(() => {\n            setImportModalOpen(false);\n          }, 2000);\n        } else {\n          setImportError('Failed to import data. Make sure the file is a valid TaskManager export.');\n        }\n      } catch (error) {\n        setImportError('Invalid file format. Please select a valid JSON file.');\n      }\n    };\n    \n    reader.onerror = () => {\n      setImportError('Error reading the file');\n    };\n    \n    reader.readAsText(importFile);\n  };\n  \n  const handleResetClick = () => {\n    setResetModalOpen(true);\n  };\n  \n  const handleResetConfirm = () => {\n    resetData();\n    setResetModalOpen(false);\n  };\n  \n  const handleLoadSampleData = () => {\n    initializeSampleData();\n  };\n\n  const handleAddCategory = () => {\n    setEditingCategory(null);\n    setCategoryName('');\n    setCategoryColor('#6366f1');\n    setCategoryModalOpen(true);\n  };\n\n  const handleEditCategory = (category: Category) => {\n    setEditingCategory(category);\n    setCategoryName(category.name);\n    setCategoryColor(category.color);\n    setCategoryModalOpen(true);\n  };\n\n  const handleSaveCategory = () => {\n    if (!categoryName.trim()) return;\n\n    if (editingCategory) {\n      updateCategory({\n        ...editingCategory,\n        name: categoryName.trim(),\n        color: categoryColor,\n        updatedAt: new Date().toISOString()\n      });\n    } else {\n      addCategory({\n        name: categoryName.trim(),\n        color: categoryColor\n      });\n    }\n\n    setCategoryModalOpen(false);\n    setCategoryName('');\n    setCategoryColor('#6366f1');\n    setEditingCategory(null);\n  };\n\n  const handleDeleteCategory = (categoryId: string) => {\n    setDeleteCategoryId(categoryId);\n  };\n\n  const confirmDeleteCategory = () => {\n    if (deleteCategoryId) {\n      deleteCategory(deleteCategoryId);\n      setDeleteCategoryId(null);\n    }\n  };\n  \n  return (\n    <div className=\"space-y-6 max-w-3xl mx-auto\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row justify-between md:items-center bg-white rounded-lg shadow-sm p-4\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">Settings</h1>\n          <p className=\"text-gray-600\">Manage your data and preferences</p>\n        </div>\n      </div>\n      \n      {/* Data Management */}\n      <Card title=\"Data Management\">\n        <div className=\"space-y-4\">\n          <div className=\"flex flex-col md:flex-row md:items-center justify-between py-2 border-b border-gray-200\">\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900\">Export Data</h3>\n              <p className=\"text-sm text-gray-500\">\n                Download all your tasks, projects, and categories as a JSON file\n              </p>\n            </div>\n            <Button\n              variant=\"primary\"\n              icon={<Download size={16} />}\n              className=\"mt-2 md:mt-0\"\n              onClick={handleExportData}\n            >\n              Export\n            </Button>\n          </div>\n          \n          <div className=\"flex flex-col md:flex-row md:items-center justify-between py-2 border-b border-gray-200\">\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900\">Import Data</h3>\n              <p className=\"text-sm text-gray-500\">\n                Import previously exported data into TaskManager\n              </p>\n            </div>\n            <Button\n              variant=\"secondary\"\n              icon={<Upload size={16} />}\n              className=\"mt-2 md:mt-0\"\n              onClick={handleImportClick}\n            >\n              Import\n            </Button>\n          </div>\n          \n          <div className=\"flex flex-col md:flex-row md:items-center justify-between py-2 border-b border-gray-200\">\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900\">Sample Data</h3>\n              <p className=\"text-sm text-gray-500\">\n                Load sample tasks, projects, and categories for demonstration\n              </p>\n            </div>\n            <Button\n              variant=\"secondary\"\n              className=\"mt-2 md:mt-0\"\n              onClick={handleLoadSampleData}\n            >\n              Load Samples\n            </Button>\n          </div>\n          \n          <div className=\"flex flex-col md:flex-row md:items-center justify-between py-2\">\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900\">Reset Data</h3>\n              <p className=\"text-sm text-gray-500\">\n                Delete all data and start fresh (cannot be undone)\n              </p>\n            </div>\n            <Button\n              variant=\"danger\"\n              icon={<Trash2 size={16} />}\n              className=\"mt-2 md:mt-0\"\n              onClick={handleResetClick}\n            >\n              Reset\n            </Button>\n          </div>\n        </div>\n      </Card>\n      \n      {/* AI Settings */}\n      <Card>\n        <div \n          className=\"cursor-pointer\"\n          onClick={() => setShowAISettings(!showAISettings)}\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Brain className=\"w-5 h-5 text-purple-600 mr-2\" />\n              <h2 className=\"text-lg font-medium text-gray-900\">AI Task Breakdown</h2>\n            </div>\n            {showAISettings ? (\n              <ChevronUp className=\"w-5 h-5 text-gray-400\" />\n            ) : (\n              <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n            )}\n          </div>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Configure AI-powered task breakdown for ADHD\n          </p>\n        </div>\n        \n        {showAISettings && (\n          <div className=\"mt-4 pt-4 border-t border-gray-200\">\n            <AISettings />\n          </div>\n        )}\n      </Card>\n      \n      {/* Category Management */}\n      <Card>\n        <div \n          className=\"cursor-pointer\"\n          onClick={() => setShowCategories(!showCategories)}\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Tag className=\"w-5 h-5 text-indigo-600 mr-2\" />\n              <h2 className=\"text-lg font-medium text-gray-900\">Categories</h2>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <span className=\"text-sm text-gray-500\">{categories.length} categories</span>\n              {showCategories ? (\n                <ChevronUp className=\"w-5 h-5 text-gray-400\" />\n              ) : (\n                <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n              )}\n            </div>\n          </div>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Organize your tasks with custom categories\n          </p>\n        </div>\n        \n        {showCategories && (\n          <div className=\"mt-4 pt-4 border-t border-gray-200\">\n            <div className=\"space-y-3\">\n              {categories.map((category) => (\n                <div key={category.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <div\n                      className=\"w-4 h-4 rounded-full\"\n                      style={{ backgroundColor: category.color }}\n                    />\n                    <span className=\"font-medium\">{category.name}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleEditCategory(category);\n                      }}\n                      className=\"p-1 hover:bg-gray-200 rounded transition-colors\"\n                    >\n                      <Edit2 className=\"w-4 h-4 text-gray-600\" />\n                    </button>\n                    <button\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        handleDeleteCategory(category.id);\n                      }}\n                      className=\"p-1 hover:bg-red-100 rounded transition-colors\"\n                    >\n                      <Trash2 className=\"w-4 h-4 text-red-600\" />\n                    </button>\n                  </div>\n                </div>\n              ))}\n              \n              <Button\n                variant=\"primary\"\n                icon={<Plus size={16} />}\n                onClick={handleAddCategory}\n                className=\"w-full\"\n              >\n                Add Category\n              </Button>\n            </div>\n          </div>\n        )}\n      </Card>\n      \n      {/* Duplicate Cleanup */}\n      <Card>\n        <div \n          className=\"cursor-pointer\"\n          onClick={() => setShowDuplicateCleanup(!showDuplicateCleanup)}\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Users className=\"w-5 h-5 text-amber-600 mr-2\" />\n              <h2 className=\"text-lg font-medium text-gray-900\">Duplicate Cleanup</h2>\n            </div>\n            {showDuplicateCleanup ? (\n              <ChevronUp className=\"w-5 h-5 text-gray-400\" />\n            ) : (\n              <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n            )}\n          </div>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Find and remove duplicate tasks, projects, and categories\n          </p>\n        </div>\n        \n        {showDuplicateCleanup && (\n          <div className=\"mt-4 pt-4 border-t border-gray-200\">\n            <DuplicateCleanupLocal />\n          </div>\n        )}\n      </Card>\n      \n      {/* Time Management Settings */}\n      <Card>\n        <div \n          className=\"cursor-pointer\"\n          onClick={() => setShowTimeManagement(!showTimeManagement)}\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Clock className=\"w-5 h-5 text-blue-600 mr-2\" />\n              <h2 className=\"text-lg font-medium text-gray-900\">Time Management</h2>\n            </div>\n            {showTimeManagement ? (\n              <ChevronUp className=\"w-5 h-5 text-gray-400\" />\n            ) : (\n              <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n            )}\n          </div>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Configure time-related settings for better ADHD management\n          </p>\n        </div>\n        \n        {showTimeManagement && (\n          <div className=\"mt-4 pt-4 border-t border-gray-200 space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Default Buffer Time Between Tasks\n              </label>\n              <select\n                value={settings.timeManagement.defaultBufferTime}\n                onChange={(e) => updateSettings({\n                  timeManagement: {\n                    ...settings.timeManagement,\n                    defaultBufferTime: parseInt(e.target.value)\n                  }\n                })}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"0\">No buffer</option>\n                <option value=\"5\">5 minutes</option>\n                <option value=\"10\">10 minutes</option>\n                <option value=\"15\">15 minutes</option>\n                <option value=\"20\">20 minutes</option>\n                <option value=\"30\">30 minutes</option>\n              </select>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Automatically add transition time between scheduled tasks\n              </p>\n            </div>\n\n            <div>\n              <label className=\"flex items-center gap-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.timeManagement.timeBlindnessAlerts}\n                  onChange={(e) => updateSettings({\n                    timeManagement: {\n                      ...settings.timeManagement,\n                      timeBlindnessAlerts: e.target.checked\n                    }\n                  })}\n                  className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\n                />\n                <span className=\"text-sm font-medium text-gray-700\">Enable Time Blindness Alerts</span>\n              </label>\n              <p className=\"mt-1 ml-7 text-sm text-gray-500\">\n                Get periodic reminders of the current time\n              </p>\n            </div>\n\n            {settings.timeManagement.timeBlindnessAlerts && (\n              <div className=\"ml-7\">\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Alert Frequency\n                </label>\n                <select\n                  value={settings.timeManagement.timeBlindnessInterval}\n                  onChange={(e) => updateSettings({\n                    timeManagement: {\n                      ...settings.timeManagement,\n                      timeBlindnessInterval: parseInt(e.target.value)\n                    }\n                  })}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n                >\n                  <option value=\"30\">Every 30 minutes</option>\n                  <option value=\"60\">Every hour</option>\n                  <option value=\"120\">Every 2 hours</option>\n                </select>\n              </div>\n            )}\n\n            <div>\n              <label className=\"flex items-center gap-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.timeManagement.autoAdjustEstimates}\n                  onChange={(e) => updateSettings({\n                    timeManagement: {\n                      ...settings.timeManagement,\n                      autoAdjustEstimates: e.target.checked\n                    }\n                  })}\n                  className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\n                />\n                <span className=\"text-sm font-medium text-gray-700\">Auto-adjust Time Estimates</span>\n              </label>\n              <p className=\"mt-1 ml-7 text-sm text-gray-500\">\n                Learn from your actual task completion times\n              </p>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Getting Ready Time for Appointments\n              </label>\n              <select\n                value={settings.timeManagement.gettingReadyTime}\n                onChange={(e) => updateSettings({\n                  timeManagement: {\n                    ...settings.timeManagement,\n                    gettingReadyTime: parseInt(e.target.value)\n                  }\n                })}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"15\">15 minutes</option>\n                <option value=\"30\">30 minutes</option>\n                <option value=\"45\">45 minutes</option>\n                <option value=\"60\">1 hour</option>\n              </select>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Add preparation time before appointments automatically\n              </p>\n            </div>\n          </div>\n        )}\n      </Card>\n\n      {/* Visual Preferences */}\n      <Card>\n        <div \n          className=\"cursor-pointer\"\n          onClick={() => setShowVisualPreferences(!showVisualPreferences)}\n        >\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Eye className=\"w-5 h-5 text-purple-600 mr-2\" />\n              <h2 className=\"text-lg font-medium text-gray-900\">Visual Preferences</h2>\n            </div>\n            {showVisualPreferences ? (\n              <ChevronUp className=\"w-5 h-5 text-gray-400\" />\n            ) : (\n              <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n            )}\n          </div>\n          <p className=\"text-sm text-gray-600 mt-1\">\n            Customize the appearance for better focus\n          </p>\n        </div>\n        \n        {showVisualPreferences && (\n          <div className=\"mt-4 pt-4 border-t border-gray-200 space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Font Size\n              </label>\n              <select\n                value={settings.visual.fontSize}\n                onChange={(e) => updateSettings({\n                  visual: {\n                    ...settings.visual,\n                    fontSize: e.target.value as 'small' | 'medium' | 'large'\n                  }\n                })}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"small\">Small</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"large\">Large</option>\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Layout Density\n              </label>\n              <select\n                value={settings.visual.layoutDensity}\n                onChange={(e) => updateSettings({\n                  visual: {\n                    ...settings.visual,\n                    layoutDensity: e.target.value as 'compact' | 'comfortable' | 'spacious'\n                  }\n                })}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent\"\n              >\n                <option value=\"compact\">Compact</option>\n                <option value=\"comfortable\">Comfortable</option>\n                <option value=\"spacious\">Spacious</option>\n              </select>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Adjust spacing between elements\n              </p>\n            </div>\n\n            <div>\n              <label className=\"flex items-center gap-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.visual.reduceAnimations}\n                  onChange={(e) => updateSettings({\n                    visual: {\n                      ...settings.visual,\n                      reduceAnimations: e.target.checked\n                    }\n                  })}\n                  className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\n                />\n                <span className=\"text-sm font-medium text-gray-700\">Reduce Animations</span>\n              </label>\n              <p className=\"mt-1 ml-7 text-sm text-gray-500\">\n                Minimize motion for less distraction\n              </p>\n            </div>\n\n            <div>\n              <label className=\"flex items-center gap-3\">\n                <input\n                  type=\"checkbox\"\n                  checked={settings.visual.highContrast}\n                  onChange={(e) => updateSettings({\n                    visual: {\n                      ...settings.visual,\n                      highContrast: e.target.checked\n                    }\n                  })}\n                  className=\"w-4 h-4 text-blue-600 rounded focus:ring-blue-500\"\n                />\n                <span className=\"text-sm font-medium text-gray-700\">High Contrast Mode</span>\n              </label>\n              <p className=\"mt-1 ml-7 text-sm text-gray-500\">\n                Increase contrast for better visibility\n              </p>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Priority Colors\n              </label>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"text-sm text-gray-600 w-20\">High:</span>\n                  <input\n                    type=\"color\"\n                    value={settings.visual.customPriorityColors.high}\n                    onChange={(e) => updateSettings({\n                      visual: {\n                        ...settings.visual,\n                        customPriorityColors: {\n                          ...settings.visual.customPriorityColors,\n                          high: e.target.value\n                        }\n                      }\n                    })}\n                    className=\"w-12 h-8 border border-gray-300 rounded cursor-pointer\"\n                  />\n                  <span className=\"text-sm font-mono text-gray-600\">\n                    {settings.visual.customPriorityColors.high}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"text-sm text-gray-600 w-20\">Medium:</span>\n                  <input\n                    type=\"color\"\n                    value={settings.visual.customPriorityColors.medium}\n                    onChange={(e) => updateSettings({\n                      visual: {\n                        ...settings.visual,\n                        customPriorityColors: {\n                          ...settings.visual.customPriorityColors,\n                          medium: e.target.value\n                        }\n                      }\n                    })}\n                    className=\"w-12 h-8 border border-gray-300 rounded cursor-pointer\"\n                  />\n                  <span className=\"text-sm font-mono text-gray-600\">\n                    {settings.visual.customPriorityColors.medium}\n                  </span>\n                </div>\n                <div className=\"flex items-center gap-3\">\n                  <span className=\"text-sm text-gray-600 w-20\">Low:</span>\n                  <input\n                    type=\"color\"\n                    value={settings.visual.customPriorityColors.low}\n                    onChange={(e) => updateSettings({\n                      visual: {\n                        ...settings.visual,\n                        customPriorityColors: {\n                          ...settings.visual.customPriorityColors,\n                          low: e.target.value\n                        }\n                      }\n                    })}\n                    className=\"w-12 h-8 border border-gray-300 rounded cursor-pointer\"\n                  />\n                  <span className=\"text-sm font-mono text-gray-600\">\n                    {settings.visual.customPriorityColors.low}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </Card>\n      \n      {/* About */}\n      <Card title=\"About TaskManager\">\n        <div className=\"space-y-2\">\n          <p className=\"text-sm text-gray-600\">\n            TaskManager is a personal productivity app that helps you organize your tasks, projects, and daily schedule.\n          </p>\n          <p className=\"text-sm text-gray-600\">\n            Version 1.0.0\n          </p>\n        </div>\n      </Card>\n      \n      {/* Import Modal */}\n      <Modal\n        isOpen={importModalOpen}\n        onClose={() => setImportModalOpen(false)}\n        title=\"Import Data\"\n      >\n        <div className=\"space-y-4\">\n          {!importSuccess ? (\n            <>\n              <p className=\"text-gray-600\">\n                Select a TaskManager export file (.json) to import. This will add the data to your existing data.\n              </p>\n              \n              <div className=\"mt-4\">\n                <input\n                  type=\"file\"\n                  accept=\".json\"\n                  className=\"block w-full text-sm text-gray-500\n                    file:mr-4 file:py-2 file:px-4\n                    file:rounded-md file:border-0\n                    file:text-sm file:font-medium\n                    file:bg-indigo-50 file:text-indigo-700\n                    hover:file:bg-indigo-100\"\n                  onChange={handleFileChange}\n                />\n              </div>\n              \n              {importError && (\n                <div className=\"p-3 bg-red-50 text-red-700 rounded-md flex items-start\">\n                  <AlertCircle size={16} className=\"mr-2 mt-0.5 flex-shrink-0\" />\n                  <p className=\"text-sm\">{importError}</p>\n                </div>\n              )}\n              \n              <div className=\"flex justify-end space-x-3 pt-4\">\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => setImportModalOpen(false)}\n                >\n                  Cancel\n                </Button>\n                <Button\n                  variant=\"primary\"\n                  onClick={handleImportData}\n                  disabled={!importFile}\n                >\n                  Import\n                </Button>\n              </div>\n            </>\n          ) : (\n            <div className=\"text-center py-4\">\n              <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\n                <CheckIcon className=\"h-6 w-6 text-green-600\" />\n              </div>\n              <h3 className=\"mt-2 text-lg font-medium text-gray-900\">Import Successful</h3>\n              <p className=\"mt-1 text-sm text-gray-500\">\n                Your data has been imported successfully.\n              </p>\n            </div>\n          )}\n        </div>\n      </Modal>\n      \n      {/* Reset Modal */}\n      <Modal\n        isOpen={resetModalOpen}\n        onClose={() => setResetModalOpen(false)}\n        title=\"Reset Data\"\n      >\n        <div className=\"space-y-4\">\n          <div className=\"p-3 bg-red-50 text-red-700 rounded-md flex items-start\">\n            <AlertCircle size={16} className=\"mr-2 mt-0.5 flex-shrink-0\" />\n            <div>\n              <p className=\"text-sm font-medium\">Warning: This action cannot be undone</p>\n              <p className=\"text-sm\">All your tasks, projects, and categories will be permanently deleted.</p>\n            </div>\n          </div>\n          \n          <p className=\"text-gray-600\">\n            Consider exporting your data before resetting if you might want to restore it later.\n          </p>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"secondary\"\n              onClick={() => setResetModalOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"danger\"\n              onClick={handleResetConfirm}\n            >\n              Reset All Data\n            </Button>\n          </div>\n        </div>\n      </Modal>\n      \n      {/* Category Modal */}\n      <Modal\n        isOpen={categoryModalOpen}\n        onClose={() => setCategoryModalOpen(false)}\n        title={editingCategory ? 'Edit Category' : 'Add Category'}\n      >\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Category Name\n            </label>\n            <input\n              type=\"text\"\n              value={categoryName}\n              onChange={(e) => setCategoryName(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-transparent\"\n              placeholder=\"Enter category name\"\n              autoFocus\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Color\n            </label>\n            <div className=\"flex items-center gap-2\">\n              <input\n                type=\"color\"\n                value={categoryColor}\n                onChange={(e) => setCategoryColor(e.target.value)}\n                className=\"w-16 h-10 border border-gray-300 rounded cursor-pointer\"\n              />\n              <div\n                className=\"w-24 h-10 rounded-md border border-gray-300 flex items-center justify-center text-sm font-mono\"\n                style={{ backgroundColor: categoryColor }}\n              >\n                {categoryColor}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"secondary\"\n              onClick={() => setCategoryModalOpen(false)}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"primary\"\n              onClick={handleSaveCategory}\n              disabled={!categoryName.trim()}\n            >\n              {editingCategory ? 'Save' : 'Add'}\n            </Button>\n          </div>\n        </div>\n      </Modal>\n      \n      {/* Delete Category Confirmation Modal */}\n      <Modal\n        isOpen={!!deleteCategoryId}\n        onClose={() => setDeleteCategoryId(null)}\n        title=\"Delete Category\"\n      >\n        <div className=\"space-y-4\">\n          <div className=\"p-3 bg-red-50 text-red-700 rounded-md flex items-start\">\n            <AlertCircle size={16} className=\"mr-2 mt-0.5 flex-shrink-0\" />\n            <div>\n              <p className=\"text-sm font-medium\">This action cannot be undone</p>\n              <p className=\"text-sm\">Tasks with this category will still exist but won't have this category.</p>\n            </div>\n          </div>\n          \n          <p className=\"text-gray-600\">\n            Are you sure you want to delete this category?\n          </p>\n          \n          <div className=\"flex justify-end space-x-3 pt-4\">\n            <Button\n              variant=\"secondary\"\n              onClick={() => setDeleteCategoryId(null)}\n            >\n              Cancel\n            </Button>\n            <Button\n              variant=\"danger\"\n              onClick={confirmDeleteCategory}\n            >\n              Delete Category\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    </div>\n  );\n};\n\n// Check icon for success message\nconst CheckIcon = ({ className }: { className?: string }) => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    className={className} \n    fill=\"none\" \n    viewBox=\"0 0 24 24\" \n    stroke=\"currentColor\"\n  >\n    <path \n      strokeLinecap=\"round\" \n      strokeLinejoin=\"round\" \n      strokeWidth={2} \n      d=\"M5 13l4 4L19 7\" \n    />\n  </svg>\n);\n\nexport default SettingsPage;"],"names":["DuplicateCleanupLocal","tasks","projects","categories","deleteTask","deleteProject","deleteCategory","useAppContext","isAnalyzing","setIsAnalyzing","useState","isCleaningUp","setIsCleaningUp","duplicateTaskGroups","setDuplicateTaskGroups","duplicateProjectGroups","setDuplicateProjectGroups","duplicateCategoryGroups","setDuplicateCategoryGroups","activeTab","setActiveTab","error","setError","cleanupComplete","setCleanupComplete","useEffect","analyzeDuplicates","taskGroups","task","titlePart","descPart","key","duplicateTasks","groupTasks","sortedTasks","a","b","projectGroups","project","namePart","duplicateProjects","groupProjects","sortedProjects","categoryGroups","category","colorPart","duplicateCategories","groupCategories","sortedCategories","err","handleTaskKeepSelection","groupKey","taskId","prev","group","handleProjectKeepSelection","projectId","handleCategoryKeepSelection","categoryId","cleanupDuplicates","totalDeletedTasks","totalDeletedProjects","totalDeletedCategories","tasksToDelete","projectsToDelete","categoriesToDelete","totalDeleted","formatDate","dateString","Card","jsxs","jsx","Loader2","CheckCircle","Button","currentGroups","Users","Fragment","groupIndex","_a","_b","_c","item","total","Trash2","SettingsPage","exportData","importData","resetData","initializeSampleData","addCategory","updateCategory","settings","updateSettings","importModalOpen","setImportModalOpen","resetModalOpen","setResetModalOpen","importFile","setImportFile","importError","setImportError","importSuccess","setImportSuccess","showAISettings","setShowAISettings","showCategories","setShowCategories","categoryModalOpen","setCategoryModalOpen","editingCategory","setEditingCategory","categoryName","setCategoryName","categoryColor","setCategoryColor","deleteCategoryId","setDeleteCategoryId","showTimeManagement","setShowTimeManagement","showVisualPreferences","setShowVisualPreferences","showDuplicateCleanup","setShowDuplicateCleanup","handleExportData","data","blob","url","handleImportClick","handleFileChange","e","handleImportData","reader","content","handleResetClick","handleResetConfirm","handleLoadSampleData","handleAddCategory","handleEditCategory","handleSaveCategory","handleDeleteCategory","confirmDeleteCategory","Download","Upload","Brain","ChevronUp","ChevronDown","AISettings","Tag","Edit2","Plus","Clock","Eye","Modal","CheckIcon","AlertCircle","className"],"mappings":"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"}