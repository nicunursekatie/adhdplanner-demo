{"version":3,"file":"importTransform-dc44e0f7.js","sources":["../../../src/utils/importTransform.ts"],"sourcesContent":["import { Task, Project, Category } from '../types';\n\ninterface LegacyTask {\n  id: string;\n  title: string;\n  dueDate: string | null;\n  status: 'pending' | 'completed';\n  categories: string[];\n  projectId: string | null;\n  parentId?: string;\n}\n\ninterface LegacyCategory {\n  id: string;\n  name: string;\n  color: string;\n}\n\ninterface LegacyProject {\n  id: string;\n  name: string;\n  description: string;\n}\n\ninterface LegacyData {\n  tasks: LegacyTask[];\n  categories: LegacyCategory[];\n  projects: LegacyProject[];\n  exportDate: string;\n  version: string;\n}\n\nexport const transformImportedData = (jsonData: string): {\n  tasks: Task[];\n  categories: Category[];\n  projects: Project[];\n} | null => {\n  try {\n    const data = JSON.parse(jsonData) as LegacyData;\n    const timestamp = new Date().toISOString();\n\n    // Transform categories\n    const categories: Category[] = data.categories.map(cat => ({\n      id: cat.id,\n      name: cat.name,\n      color: cat.color,\n      createdAt: timestamp,\n      updatedAt: timestamp,\n    }));\n\n    // Transform projects\n    const projects: Project[] = data.projects.map(proj => ({\n      id: proj.id,\n      name: proj.name,\n      description: proj.description,\n      color: '#3B82F6', // Default blue color\n      createdAt: timestamp,\n      updatedAt: timestamp,\n    }));\n\n    // Transform tasks\n    const tasks: Task[] = data.tasks.map(task => ({\n      id: task.id,\n      title: task.title,\n      description: '', // No description in legacy data\n      completed: task.status === 'completed',\n      dueDate: task.dueDate,\n      projectId: task.projectId,\n      categoryIds: task.categories,\n      parentTaskId: task.parentId || null,\n      subtasks: [], // Will be populated below\n      createdAt: timestamp,\n      updatedAt: timestamp,\n    }));\n\n    // Set up parent-child relationships\n    tasks.forEach(task => {\n      if (task.parentTaskId) {\n        const parentTask = tasks.find(t => t.id === task.parentTaskId);\n        if (parentTask) {\n          parentTask.subtasks.push(task.id);\n        }\n      }\n    });\n\n    return { tasks, categories, projects };\n  } catch (error) {\n    return null;\n  }\n};"],"names":["transformImportedData","jsonData","data","timestamp","categories","cat","projects","proj","tasks","task","parentTask","t"],"mappings":"AAgCa,MAAAA,EAAyBC,GAI1B,CACN,GAAA,CACI,MAAAC,EAAO,KAAK,MAAMD,CAAQ,EAC1BE,EAAY,IAAI,KAAK,EAAE,YAAY,EAGnCC,EAAyBF,EAAK,WAAW,IAAYG,IAAA,CACzD,GAAIA,EAAI,GACR,KAAMA,EAAI,KACV,MAAOA,EAAI,MACX,UAAWF,EACX,UAAWA,CACX,EAAA,EAGIG,EAAsBJ,EAAK,SAAS,IAAaK,IAAA,CACrD,GAAIA,EAAK,GACT,KAAMA,EAAK,KACX,YAAaA,EAAK,YAClB,MAAO,UACP,UAAWJ,EACX,UAAWA,CACX,EAAA,EAGIK,EAAgBN,EAAK,MAAM,IAAaO,IAAA,CAC5C,GAAIA,EAAK,GACT,MAAOA,EAAK,MACZ,YAAa,GACb,UAAWA,EAAK,SAAW,YAC3B,QAASA,EAAK,QACd,UAAWA,EAAK,UAChB,YAAaA,EAAK,WAClB,aAAcA,EAAK,UAAY,KAC/B,SAAU,CAAC,EACX,UAAWN,EACX,UAAWA,CACX,EAAA,EAGF,OAAAK,EAAM,QAAgBC,GAAA,CACpB,GAAIA,EAAK,aAAc,CACrB,MAAMC,EAAaF,EAAM,QAAUG,EAAE,KAAOF,EAAK,YAAY,EACzDC,GACSA,EAAA,SAAS,KAAKD,EAAK,EAAE,CAEpC,CAAA,CACD,EAEM,CAAE,MAAAD,EAAO,WAAAJ,EAAY,SAAAE,QACd,CACP,OAAA,IACT,CACF"}